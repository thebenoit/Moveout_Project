{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = exports.hasSessionSupport = void 0;\nconst stream_1 = require(\"stream\");\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"../sdam/common\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst commands_1 = require(\"./commands\");\nconst stream_description_1 = require(\"./stream_description\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst on_data_1 = require(\"./wire_protocol/on_data\");\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction streamIdentifier(stream, options) {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n  const {\n    remoteAddress,\n    remotePort\n  } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n  return (0, utils_1.uuidV4)().toString('hex');\n}\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    super();\n    this.lastHelloMS = -1;\n    this.helloOk = false;\n    this.delayedTimeoutId = null;\n    /** Indicates that the connection (including underlying TCP socket) has been closed. */\n    this.closed = false;\n    this.clusterTime = null;\n    this.error = null;\n    this.dataEvents = null;\n    this.socket = stream;\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.mongoLogger = options.mongoLogger;\n    this.established = false;\n    this.description = new stream_description_1.StreamDescription(this.address, options);\n    this.generation = options.generation;\n    this.lastUseTime = (0, utils_1.now)();\n    this.messageStream = this.socket.on('error', this.onError.bind(this)).pipe(new SizedMessageTransform({\n      connection: this\n    })).on('error', this.onError.bind(this));\n    this.socket.on('close', this.onClose.bind(this));\n    this.socket.on('timeout', this.onTimeout.bind(this));\n  }\n  get hello() {\n    return this.description.hello;\n  }\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response) {\n    this.description.receiveResponse(response);\n    Object.freeze(this.description);\n  }\n  get serviceId() {\n    return this.hello?.serviceId;\n  }\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n  }\n  get hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n  get supportsOpMsg() {\n    return this.description != null && (0, utils_1.maxWireVersion)(this) >= 6 && !this.description.__nodejs_mock_server__;\n  }\n  get shouldEmitAndLogCommand() {\n    return (this.monitorCommands || this.established && !this.authContext?.reauthenticating && this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG)) ?? false;\n  }\n  markAvailable() {\n    this.lastUseTime = (0, utils_1.now)();\n  }\n  onError(error) {\n    this.cleanup(error);\n  }\n  onClose() {\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new error_1.MongoNetworkError(message));\n  }\n  onTimeout() {\n    this.delayedTimeoutId = (0, timers_1.setTimeout)(() => {\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      this.cleanup(new error_1.MongoNetworkTimeoutError(message, {\n        beforeHandshake\n      }));\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n  destroy() {\n    if (this.closed) {\n      return;\n    }\n    // load balanced mode requires that these listeners remain on the connection\n    // after cleanup on timeouts, errors or close so we remove them before calling\n    // cleanup.\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new error_1.MongoNetworkError(message));\n  }\n  /**\n   * A method that cleans up the connection.  When `force` is true, this method\n   * forcibly destroys the socket.\n   *\n   * If an error is provided, any in-flight operations will be closed with the error.\n   *\n   * This method does nothing if the connection is already closed.\n   */\n  cleanup(error) {\n    if (this.closed) {\n      return;\n    }\n    this.socket.destroy();\n    this.error = error;\n    this.dataEvents?.throw(error).then(undefined, () => null); // squash unhandled rejection\n    this.closed = true;\n    this.emit(Connection.CLOSE);\n  }\n  prepareCommand(db, command, options) {\n    let cmd = {\n      ...command\n    };\n    const readPreference = (0, shared_1.getReadPreference)(options);\n    const session = options?.session;\n    let clusterTime = this.clusterTime;\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      cmd.apiVersion = version;\n      if (strict != null) cmd.apiStrict = strict;\n      if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n    }\n    if (this.hasSessionSupport && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n      const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n      if (sessionError) throw sessionError;\n    } else if (session?.explicit) {\n      throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n    }\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      cmd.$clusterTime = clusterTime;\n    }\n    // For standalone, drivers MUST NOT set $readPreference.\n    if (this.description.type !== common_1.ServerType.Standalone) {\n      if (!(0, shared_1.isSharded)(this) && !this.description.loadBalanced && this.supportsOpMsg && options.directConnection === true && readPreference?.mode === 'primary') {\n        // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n        // For all other types with a direct connection, if the read preference is 'primary'\n        // (driver sets 'primary' as default if no read preference is configured),\n        // the $readPreference MUST be set to 'primaryPreferred'\n        // to ensure that any server type can handle the request.\n        cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();\n      } else if ((0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n        // When sending a read operation via OP_QUERY and the $readPreference modifier,\n        // the query MUST be provided using the $query modifier.\n        cmd = {\n          $query: cmd,\n          $readPreference: readPreference.toJSON()\n        };\n      } else if (readPreference?.mode !== 'primary') {\n        // For mode 'primary', drivers MUST NOT set $readPreference.\n        // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n        // drivers MUST set $readPreference\n        cmd.$readPreference = readPreference.toJSON();\n      }\n    }\n    const commandOptions = {\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk(),\n      ...options\n    };\n    const message = this.supportsOpMsg ? new commands_1.OpMsgRequest(db, cmd, commandOptions) : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n    return message;\n  }\n  async *sendWire(message, options) {\n    this.throwIfAborted();\n    if (typeof options.socketTimeoutMS === 'number') {\n      this.socket.setTimeout(options.socketTimeoutMS);\n    } else if (this.socketTimeoutMS !== 0) {\n      this.socket.setTimeout(this.socketTimeoutMS);\n    }\n    try {\n      await this.writeCommand(message, {\n        agreedCompressor: this.description.compressor ?? 'none',\n        zlibCompressionLevel: this.description.zlibCompressionLevel\n      });\n      if (options.noResponse) {\n        yield {\n          ok: 1\n        };\n        return;\n      }\n      this.throwIfAborted();\n      for await (const response of this.readMany()) {\n        this.socket.setTimeout(0);\n        response.parse(options);\n        const [document] = response.documents;\n        if (!Buffer.isBuffer(document)) {\n          const {\n            session\n          } = options;\n          if (session) {\n            (0, sessions_1.updateSessionFromResponse)(session, document);\n          }\n          if (document.$clusterTime) {\n            this.clusterTime = document.$clusterTime;\n            this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n          }\n        }\n        yield document;\n        this.throwIfAborted();\n        if (typeof options.socketTimeoutMS === 'number') {\n          this.socket.setTimeout(options.socketTimeoutMS);\n        } else if (this.socketTimeoutMS !== 0) {\n          this.socket.setTimeout(this.socketTimeoutMS);\n        }\n      }\n    } finally {\n      this.socket.setTimeout(0);\n    }\n  }\n  async *sendCommand(ns, command, options = {}) {\n    const message = this.prepareCommand(ns.db, command, options);\n    let started = 0;\n    if (this.shouldEmitAndLogCommand) {\n      started = (0, utils_1.now)();\n      this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n    }\n    let document;\n    try {\n      this.throwIfAborted();\n      for await (document of this.sendWire(message, options)) {\n        if (!Buffer.isBuffer(document) && document.writeConcernError) {\n          throw new error_1.MongoWriteConcernError(document.writeConcernError, document);\n        }\n        if (!Buffer.isBuffer(document) && (document.ok === 0 || document.$err || document.errmsg || document.code)) {\n          throw new error_1.MongoServerError(document);\n        }\n        if (this.shouldEmitAndLogCommand) {\n          this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n        }\n        yield document;\n        this.throwIfAborted();\n      }\n    } catch (error) {\n      if (this.shouldEmitAndLogCommand) {\n        if (error.name === 'MongoWriteConcernError') {\n          this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n        } else {\n          this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n        }\n      }\n      throw error;\n    }\n  }\n  async command(ns, command, options = {}) {\n    this.throwIfAborted();\n    for await (const document of this.sendCommand(ns, command, options)) {\n      return document;\n    }\n    throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');\n  }\n  exhaustCommand(ns, command, options, replyListener) {\n    const exhaustLoop = async () => {\n      this.throwIfAborted();\n      for await (const reply of this.sendCommand(ns, command, options)) {\n        replyListener(undefined, reply);\n        this.throwIfAborted();\n      }\n      throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n    };\n    exhaustLoop().catch(replyListener);\n  }\n  throwIfAborted() {\n    if (this.error) throw this.error;\n  }\n  /**\n   * @internal\n   *\n   * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n   * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n   */\n  async writeCommand(command, options) {\n    const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command) ? command : new commands_1.OpCompressedRequest(command, {\n      agreedCompressor: options.agreedCompressor ?? 'none',\n      zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n    });\n    const buffer = Buffer.concat(await finalCommand.toBin());\n    if (this.socket.write(buffer)) return;\n    return (0, utils_1.once)(this.socket, 'drain');\n  }\n  /**\n   * @internal\n   *\n   * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n   * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n   * by calling `return` on the generator.\n   *\n   * Note that `for-await` loops call `return` automatically when the loop is exited.\n   */\n  async *readMany() {\n    try {\n      this.dataEvents = (0, on_data_1.onData)(this.messageStream);\n      for await (const message of this.dataEvents) {\n        const response = await (0, compression_1.decompressResponse)(message);\n        yield response;\n        if (!response.moreToCome) {\n          return;\n        }\n      }\n    } finally {\n      this.dataEvents = null;\n      this.throwIfAborted();\n    }\n  }\n}\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */\nclass SizedMessageTransform extends stream_1.Transform {\n  constructor({\n    connection\n  }) {\n    super({\n      objectMode: false\n    });\n    this.bufferPool = new utils_1.BufferPool();\n    this.connection = connection;\n  }\n  _transform(chunk, encoding, callback) {\n    if (this.connection.delayedTimeoutId != null) {\n      (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n      this.connection.delayedTimeoutId = null;\n    }\n    this.bufferPool.append(chunk);\n    const sizeOfMessage = this.bufferPool.getInt32();\n    if (sizeOfMessage == null) {\n      return callback();\n    }\n    if (sizeOfMessage < 0) {\n      return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n    }\n    if (sizeOfMessage > this.bufferPool.length) {\n      return callback();\n    }\n    const message = this.bufferPool.read(sizeOfMessage);\n    return callback(null, message);\n  }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this.autoEncrypter = options.autoEncrypter;\n  }\n  /** @internal @override */\n  async command(ns, cmd, options) {\n    const {\n      autoEncrypter\n    } = this;\n    if (!autoEncrypter) {\n      throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption');\n    }\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options);\n    }\n    if (serverWireVersion < 8) {\n      throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');\n    }\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys = cmd.createIndexes ? cmd.indexes.map(index => index.key) : null;\n    const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n    // Replace the saved values\n    if (sort != null && (cmd.find || cmd.findAndModify)) {\n      encrypted.sort = sort;\n    }\n    if (indexKeys != null && cmd.createIndexes) {\n      for (const [offset, index] of indexKeys.entries()) {\n        // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n        encrypted.indexes[offset].key = index;\n      }\n    }\n    const response = await super.command(ns, encrypted, options);\n    return autoEncrypter.decrypt(response, options);\n  }\n}\nexports.CryptoConnection = CryptoConnection;","map":{"version":3,"names":["stream_1","require","timers_1","constants_1","error_1","mongo_logger_1","mongo_types_1","read_preference_1","common_1","sessions_1","utils_1","command_monitoring_events_1","commands_1","stream_description_1","compression_1","on_data_1","shared_1","hasSessionSupport","conn","description","logicalSessionTimeoutMinutes","exports","streamIdentifier","stream","options","proxyHost","hostAddress","toString","remoteAddress","remotePort","HostAddress","fromHostPort","uuidV4","Connection","TypedEventEmitter","constructor","lastHelloMS","helloOk","delayedTimeoutId","closed","clusterTime","error","dataEvents","socket","id","address","socketTimeoutMS","monitorCommands","serverApi","mongoLogger","established","StreamDescription","generation","lastUseTime","now","messageStream","on","onError","bind","pipe","SizedMessageTransform","connection","onClose","onTimeout","hello","response","receiveResponse","Object","freeze","serviceId","loadBalanced","idleTime","calculateDurationInMs","supportsOpMsg","maxWireVersion","__nodejs_mock_server__","shouldEmitAndLogCommand","authContext","reauthenticating","willLog","MongoLoggableComponent","COMMAND","SeverityLevel","DEBUG","markAvailable","cleanup","message","MongoNetworkError","setTimeout","beforeHandshake","MongoNetworkTimeoutError","unref","destroy","removeAllListeners","PINNED","UNPINNED","throw","then","undefined","emit","CLOSE","prepareCommand","db","command","cmd","readPreference","getReadPreference","session","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","greaterThan","sessionError","applySession","explicit","MongoCompatibilityError","$clusterTime","type","ServerType","Standalone","isSharded","directConnection","mode","$readPreference","ReadPreference","primaryPreferred","toJSON","$query","commandOptions","numberToSkip","numberToReturn","checkKeys","secondaryOk","OpMsgRequest","OpQueryRequest","sendWire","throwIfAborted","writeCommand","agreedCompressor","compressor","zlibCompressionLevel","noResponse","ok","readMany","parse","document","documents","Buffer","isBuffer","updateSessionFromResponse","CLUSTER_TIME_RECEIVED","sendCommand","ns","started","emitAndLogCommand","COMMAND_STARTED","databaseName","CommandStartedEvent","serverConnectionId","writeConcernError","MongoWriteConcernError","$err","errmsg","code","MongoServerError","COMMAND_SUCCEEDED","CommandSucceededEvent","name","COMMAND_FAILED","CommandFailedEvent","MongoUnexpectedServerResponseError","exhaustCommand","replyListener","exhaustLoop","reply","catch","finalCommand","OpCompressedRequest","canCompress","buffer","concat","toBin","write","once","onData","decompressResponse","moreToCome","Transform","objectMode","bufferPool","BufferPool","_transform","chunk","encoding","callback","clearTimeout","append","sizeOfMessage","getInt32","MongoParseError","length","read","CryptoConnection","autoEncrypter","MongoMissingDependencyError","serverWireVersion","sort","find","findAndModify","indexKeys","createIndexes","indexes","map","index","key","encrypted","encrypt","offset","entries","decrypt"],"sources":["/Users/jerrybenoit/Desktop/Moveout_Project/moveout/node_modules/mongodb/src/cmap/connection.ts"],"sourcesContent":["import { type Readable, Transform, type TransformCallback } from 'stream';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport type { BSONSerializeOptions, Document, ObjectId } from '../bson';\nimport type { AutoEncrypter } from '../client-side-encryption/auto_encrypter';\nimport {\n  CLOSE,\n  CLUSTER_TIME_RECEIVED,\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  PINNED,\n  UNPINNED\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoMissingDependencyError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoParseError,\n  MongoServerError,\n  MongoUnexpectedServerResponseError,\n  MongoWriteConcernError\n} from '../error';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { type MongoClientAuthProviders } from '../mongo_client_auth_providers';\nimport { MongoLoggableComponent, type MongoLogger, SeverityLevel } from '../mongo_logger';\nimport { type CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport { ServerType } from '../sdam/common';\nimport { applySession, type ClientSession, updateSessionFromResponse } from '../sessions';\nimport {\n  BufferPool,\n  calculateDurationInMs,\n  type Callback,\n  HostAddress,\n  maxWireVersion,\n  type MongoDBNamespace,\n  now,\n  once,\n  uuidV4\n} from '../utils';\nimport type { WriteConcern } from '../write_concern';\nimport type { AuthContext } from './auth/auth_provider';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport {\n  OpCompressedRequest,\n  OpMsgRequest,\n  type OpMsgResponse,\n  OpQueryRequest,\n  type OpQueryResponse,\n  type WriteProtocolMessageType\n} from './commands';\nimport type { Stream } from './connect';\nimport type { ClientMetadata } from './handshake/client_metadata';\nimport { StreamDescription, type StreamDescriptionOptions } from './stream_description';\nimport { type CompressorName, decompressResponse } from './wire_protocol/compression';\nimport { onData } from './wire_protocol/on_data';\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  secondaryOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  monitoring?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n  omitReadPreference?: boolean;\n\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\n  // from executeOperation that the txnNum should be applied to this command.\n  // Applying a session to a command should happen as part of command construction,\n  // most likely in the CommandOperation#executeCommand method, where we have access to\n  // the details we need to determine if a txnNum should also be applied.\n  willRetryWrite?: boolean;\n\n  writeConcern?: WriteConcern;\n\n  directConnection?: boolean;\n}\n\n/** @public */\nexport interface ProxyOptions {\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions,\n    ProxyOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: any;\n  credentials?: MongoCredentials;\n  /** @internal */\n  authProviders: MongoClientAuthProviders;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n  metadata: ClientMetadata;\n  /** @internal */\n  extendedMetadata: Promise<Document>;\n  /** @internal */\n  mongoLogger?: MongoLogger | undefined;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null;\n}\n\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  const { remoteAddress, remotePort } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n\n  return uuidV4().toString('hex');\n}\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  public id: number | '<monitor>';\n  public address: string;\n  public lastHelloMS = -1;\n  public serverApi?: ServerApi;\n  public helloOk = false;\n  public authContext?: AuthContext;\n  public delayedTimeoutId: NodeJS.Timeout | null = null;\n  public generation: number;\n  public readonly description: Readonly<StreamDescription>;\n  /**\n   * Represents if the connection has been established:\n   *  - TCP handshake\n   *  - TLS negotiated\n   *  - mongodb handshake (saslStart, saslContinue), includes authentication\n   *\n   * Once connection is established, command logging can log events (if enabled)\n   */\n  public established: boolean;\n  /** Indicates that the connection (including underlying TCP socket) has been closed. */\n  public closed = false;\n\n  private lastUseTime: number;\n  private clusterTime: Document | null = null;\n  private error: Error | null = null;\n  private dataEvents: AsyncGenerator<Buffer, void, void> | null = null;\n\n  private readonly socketTimeoutMS: number;\n  private readonly monitorCommands: boolean;\n  private readonly socket: Stream;\n  private readonly messageStream: Readable;\n\n  /** @event */\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\n  /** @event */\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly PINNED = PINNED;\n  /** @event */\n  static readonly UNPINNED = UNPINNED;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n\n    this.socket = stream;\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.mongoLogger = options.mongoLogger;\n    this.established = false;\n\n    this.description = new StreamDescription(this.address, options);\n    this.generation = options.generation;\n    this.lastUseTime = now();\n\n    this.messageStream = this.socket\n      .on('error', this.onError.bind(this))\n      .pipe(new SizedMessageTransform({ connection: this }))\n      .on('error', this.onError.bind(this));\n    this.socket.on('close', this.onClose.bind(this));\n    this.socket.on('timeout', this.onTimeout.bind(this));\n  }\n\n  public get hello() {\n    return this.description.hello;\n  }\n\n  // the `connect` method stores the result of the handshake hello on the connection\n  public set hello(response: Document | null) {\n    this.description.receiveResponse(response);\n    Object.freeze(this.description);\n  }\n\n  public get serviceId(): ObjectId | undefined {\n    return this.hello?.serviceId;\n  }\n\n  public get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  public get idleTime(): number {\n    return calculateDurationInMs(this.lastUseTime);\n  }\n\n  private get hasSessionSupport(): boolean {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  private get supportsOpMsg(): boolean {\n    return (\n      this.description != null &&\n      maxWireVersion(this) >= 6 &&\n      !this.description.__nodejs_mock_server__\n    );\n  }\n\n  private get shouldEmitAndLogCommand(): boolean {\n    return (\n      (this.monitorCommands ||\n        (this.established &&\n          !this.authContext?.reauthenticating &&\n          this.mongoLogger?.willLog(MongoLoggableComponent.COMMAND, SeverityLevel.DEBUG))) ??\n      false\n    );\n  }\n\n  public markAvailable(): void {\n    this.lastUseTime = now();\n  }\n\n  public onError(error: Error) {\n    this.cleanup(error);\n  }\n\n  private onClose() {\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new MongoNetworkError(message));\n  }\n\n  private onTimeout() {\n    this.delayedTimeoutId = setTimeout(() => {\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      this.cleanup(new MongoNetworkTimeoutError(message, { beforeHandshake }));\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  public destroy(): void {\n    if (this.closed) {\n      return;\n    }\n\n    // load balanced mode requires that these listeners remain on the connection\n    // after cleanup on timeouts, errors or close so we remove them before calling\n    // cleanup.\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new MongoNetworkError(message));\n  }\n\n  /**\n   * A method that cleans up the connection.  When `force` is true, this method\n   * forcibly destroys the socket.\n   *\n   * If an error is provided, any in-flight operations will be closed with the error.\n   *\n   * This method does nothing if the connection is already closed.\n   */\n  private cleanup(error: Error): void {\n    if (this.closed) {\n      return;\n    }\n\n    this.socket.destroy();\n    this.error = error;\n    this.dataEvents?.throw(error).then(undefined, () => null); // squash unhandled rejection\n    this.closed = true;\n    this.emit(Connection.CLOSE);\n  }\n\n  private prepareCommand(db: string, command: Document, options: CommandOptions) {\n    let cmd = { ...command };\n\n    const readPreference = getReadPreference(options);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      cmd.apiVersion = version;\n      if (strict != null) cmd.apiStrict = strict;\n      if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (this.hasSessionSupport && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const sessionError = applySession(session, cmd, options);\n      if (sessionError) throw sessionError;\n    } else if (session?.explicit) {\n      throw new MongoCompatibilityError('Current topology does not support sessions');\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      cmd.$clusterTime = clusterTime;\n    }\n\n    // For standalone, drivers MUST NOT set $readPreference.\n    if (this.description.type !== ServerType.Standalone) {\n      if (\n        !isSharded(this) &&\n        !this.description.loadBalanced &&\n        this.supportsOpMsg &&\n        options.directConnection === true &&\n        readPreference?.mode === 'primary'\n      ) {\n        // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n        // For all other types with a direct connection, if the read preference is 'primary'\n        // (driver sets 'primary' as default if no read preference is configured),\n        // the $readPreference MUST be set to 'primaryPreferred'\n        // to ensure that any server type can handle the request.\n        cmd.$readPreference = ReadPreference.primaryPreferred.toJSON();\n      } else if (isSharded(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n        // When sending a read operation via OP_QUERY and the $readPreference modifier,\n        // the query MUST be provided using the $query modifier.\n        cmd = {\n          $query: cmd,\n          $readPreference: readPreference.toJSON()\n        };\n      } else if (readPreference?.mode !== 'primary') {\n        // For mode 'primary', drivers MUST NOT set $readPreference.\n        // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n        // drivers MUST set $readPreference\n        cmd.$readPreference = readPreference.toJSON();\n      }\n    }\n\n    const commandOptions = {\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk(),\n      ...options\n    };\n\n    const message = this.supportsOpMsg\n      ? new OpMsgRequest(db, cmd, commandOptions)\n      : new OpQueryRequest(db, cmd, commandOptions);\n\n    return message;\n  }\n\n  private async *sendWire(message: WriteProtocolMessageType, options: CommandOptions) {\n    this.throwIfAborted();\n\n    if (typeof options.socketTimeoutMS === 'number') {\n      this.socket.setTimeout(options.socketTimeoutMS);\n    } else if (this.socketTimeoutMS !== 0) {\n      this.socket.setTimeout(this.socketTimeoutMS);\n    }\n\n    try {\n      await this.writeCommand(message, {\n        agreedCompressor: this.description.compressor ?? 'none',\n        zlibCompressionLevel: this.description.zlibCompressionLevel\n      });\n\n      if (options.noResponse) {\n        yield { ok: 1 };\n        return;\n      }\n\n      this.throwIfAborted();\n\n      for await (const response of this.readMany()) {\n        this.socket.setTimeout(0);\n        response.parse(options);\n\n        const [document] = response.documents;\n\n        if (!Buffer.isBuffer(document)) {\n          const { session } = options;\n          if (session) {\n            updateSessionFromResponse(session, document);\n          }\n\n          if (document.$clusterTime) {\n            this.clusterTime = document.$clusterTime;\n            this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n          }\n        }\n\n        yield document;\n        this.throwIfAborted();\n\n        if (typeof options.socketTimeoutMS === 'number') {\n          this.socket.setTimeout(options.socketTimeoutMS);\n        } else if (this.socketTimeoutMS !== 0) {\n          this.socket.setTimeout(this.socketTimeoutMS);\n        }\n      }\n    } finally {\n      this.socket.setTimeout(0);\n    }\n  }\n\n  private async *sendCommand(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions = {}\n  ) {\n    const message = this.prepareCommand(ns.db, command, options);\n\n    let started = 0;\n    if (this.shouldEmitAndLogCommand) {\n      started = now();\n      this.emitAndLogCommand(\n        this.monitorCommands,\n        Connection.COMMAND_STARTED,\n        message.databaseName,\n        this.established,\n        new CommandStartedEvent(this, message, this.description.serverConnectionId)\n      );\n    }\n\n    let document;\n    try {\n      this.throwIfAborted();\n      for await (document of this.sendWire(message, options)) {\n        if (!Buffer.isBuffer(document) && document.writeConcernError) {\n          throw new MongoWriteConcernError(document.writeConcernError, document);\n        }\n\n        if (\n          !Buffer.isBuffer(document) &&\n          (document.ok === 0 || document.$err || document.errmsg || document.code)\n        ) {\n          throw new MongoServerError(document);\n        }\n\n        if (this.shouldEmitAndLogCommand) {\n          this.emitAndLogCommand(\n            this.monitorCommands,\n            Connection.COMMAND_SUCCEEDED,\n            message.databaseName,\n            this.established,\n            new CommandSucceededEvent(\n              this,\n              message,\n              options.noResponse ? undefined : document,\n              started,\n              this.description.serverConnectionId\n            )\n          );\n        }\n\n        yield document;\n        this.throwIfAborted();\n      }\n    } catch (error) {\n      if (this.shouldEmitAndLogCommand) {\n        if (error.name === 'MongoWriteConcernError') {\n          this.emitAndLogCommand(\n            this.monitorCommands,\n            Connection.COMMAND_SUCCEEDED,\n            message.databaseName,\n            this.established,\n            new CommandSucceededEvent(\n              this,\n              message,\n              options.noResponse ? undefined : document,\n              started,\n              this.description.serverConnectionId\n            )\n          );\n        } else {\n          this.emitAndLogCommand(\n            this.monitorCommands,\n            Connection.COMMAND_FAILED,\n            message.databaseName,\n            this.established,\n            new CommandFailedEvent(\n              this,\n              message,\n              error,\n              started,\n              this.description.serverConnectionId\n            )\n          );\n        }\n      }\n      throw error;\n    }\n  }\n\n  public async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions = {}\n  ): Promise<Document> {\n    this.throwIfAborted();\n    for await (const document of this.sendCommand(ns, command, options)) {\n      return document;\n    }\n    throw new MongoUnexpectedServerResponseError('Unable to get response from server');\n  }\n\n  public exhaustCommand(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions,\n    replyListener: Callback\n  ) {\n    const exhaustLoop = async () => {\n      this.throwIfAborted();\n      for await (const reply of this.sendCommand(ns, command, options)) {\n        replyListener(undefined, reply);\n        this.throwIfAborted();\n      }\n      throw new MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n    };\n    exhaustLoop().catch(replyListener);\n  }\n\n  private throwIfAborted() {\n    if (this.error) throw this.error;\n  }\n\n  /**\n   * @internal\n   *\n   * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n   * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n   */\n  private async writeCommand(\n    command: WriteProtocolMessageType,\n    options: { agreedCompressor?: CompressorName; zlibCompressionLevel?: number }\n  ): Promise<void> {\n    const finalCommand =\n      options.agreedCompressor === 'none' || !OpCompressedRequest.canCompress(command)\n        ? command\n        : new OpCompressedRequest(command, {\n            agreedCompressor: options.agreedCompressor ?? 'none',\n            zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n          });\n\n    const buffer = Buffer.concat(await finalCommand.toBin());\n\n    if (this.socket.write(buffer)) return;\n    return once(this.socket, 'drain');\n  }\n\n  /**\n   * @internal\n   *\n   * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n   * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n   * by calling `return` on the generator.\n   *\n   * Note that `for-await` loops call `return` automatically when the loop is exited.\n   */\n  private async *readMany(): AsyncGenerator<OpMsgResponse | OpQueryResponse> {\n    try {\n      this.dataEvents = onData(this.messageStream);\n      for await (const message of this.dataEvents) {\n        const response = await decompressResponse(message);\n        yield response;\n\n        if (!response.moreToCome) {\n          return;\n        }\n      }\n    } finally {\n      this.dataEvents = null;\n      this.throwIfAborted();\n    }\n  }\n}\n\n/** @internal */\nexport class SizedMessageTransform extends Transform {\n  bufferPool: BufferPool;\n  connection: Connection;\n\n  constructor({ connection }: { connection: Connection }) {\n    super({ objectMode: false });\n    this.bufferPool = new BufferPool();\n    this.connection = connection;\n  }\n\n  override _transform(chunk: Buffer, encoding: unknown, callback: TransformCallback): void {\n    if (this.connection.delayedTimeoutId != null) {\n      clearTimeout(this.connection.delayedTimeoutId);\n      this.connection.delayedTimeoutId = null;\n    }\n\n    this.bufferPool.append(chunk);\n    const sizeOfMessage = this.bufferPool.getInt32();\n\n    if (sizeOfMessage == null) {\n      return callback();\n    }\n\n    if (sizeOfMessage < 0) {\n      return callback(new MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n    }\n\n    if (sizeOfMessage > this.bufferPool.length) {\n      return callback();\n    }\n\n    const message = this.bufferPool.read(sizeOfMessage);\n    return callback(null, message);\n  }\n}\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this.autoEncrypter = options.autoEncrypter;\n  }\n\n  /** @internal @override */\n  override async command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions\n  ): Promise<Document> {\n    const { autoEncrypter } = this;\n    if (!autoEncrypter) {\n      throw new MongoMissingDependencyError('No AutoEncrypter available for encryption');\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options);\n    }\n\n    if (serverWireVersion < 8) {\n      throw new MongoCompatibilityError(\n        'Auto-encryption requires a minimum MongoDB version of 4.2'\n      );\n    }\n\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort: Map<string, number> | null = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys: Map<string, number>[] | null = cmd.createIndexes\n      ? cmd.indexes.map((index: { key: Map<string, number> }) => index.key)\n      : null;\n\n    const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n\n    // Replace the saved values\n    if (sort != null && (cmd.find || cmd.findAndModify)) {\n      encrypted.sort = sort;\n    }\n\n    if (indexKeys != null && cmd.createIndexes) {\n      for (const [offset, index] of indexKeys.entries()) {\n        // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n        encrypted.indexes[offset].key = index;\n      }\n    }\n\n    const response = await super.command(ns, encrypted, options);\n\n    return autoEncrypter.decrypt(response, options);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}