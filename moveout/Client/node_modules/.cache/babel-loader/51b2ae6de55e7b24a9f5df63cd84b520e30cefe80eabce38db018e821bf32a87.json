{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.OpQueryResponse = exports.OpQueryRequest = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst constants_1 = require(\"./wire_protocol/constants\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nclass OpQueryRequest {\n  constructor(databaseName, query, options) {\n    this.databaseName = databaseName;\n    this.query = query;\n    // Basic options needed to be passed in\n    // TODO(NODE-3483): Replace with MongoCommandError\n    const ns = `${databaseName}.$cmd`;\n    if (typeof databaseName !== 'string') {\n      throw new error_1.MongoRuntimeError('Database name must be a string for a query');\n    }\n    // TODO(NODE-3483): Replace with MongoCommandError\n    if (query == null) throw new error_1.MongoRuntimeError('A query document must be specified for query');\n    // Validate that we are not passing 0x00 in the collection name\n    if (ns.indexOf('\\x00') !== -1) {\n      // TODO(NODE-3483): Use MongoNamespace static method\n      throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n    }\n    // Basic options\n    this.ns = ns;\n    // Additional options\n    this.numberToSkip = options.numberToSkip || 0;\n    this.numberToReturn = options.numberToReturn || 0;\n    this.returnFieldSelector = options.returnFieldSelector || undefined;\n    this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n    // special case for pre-3.2 find commands, delete ASAP\n    this.pre32Limit = options.pre32Limit;\n    // Serialization option\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.batchSize = this.numberToReturn;\n    // Flags\n    this.tailable = false;\n    this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n    this.oplogReplay = false;\n    this.noCursorTimeout = false;\n    this.awaitData = false;\n    this.exhaust = false;\n    this.partial = false;\n  }\n  /** Assign next request Id. */\n  incRequestId() {\n    this.requestId = _requestId++;\n  }\n  /** Peek next request Id. */\n  nextRequestId() {\n    return _requestId + 1;\n  }\n  /** Increment then return next request Id. */\n  static getRequestId() {\n    return ++_requestId;\n  }\n  // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n  toBin() {\n    const buffers = [];\n    let projection = null;\n    // Set up the flags\n    let flags = 0;\n    if (this.tailable) {\n      flags |= OPTS_TAILABLE_CURSOR;\n    }\n    if (this.secondaryOk) {\n      flags |= OPTS_SECONDARY;\n    }\n    if (this.oplogReplay) {\n      flags |= OPTS_OPLOG_REPLAY;\n    }\n    if (this.noCursorTimeout) {\n      flags |= OPTS_NO_CURSOR_TIMEOUT;\n    }\n    if (this.awaitData) {\n      flags |= OPTS_AWAIT_DATA;\n    }\n    if (this.exhaust) {\n      flags |= OPTS_EXHAUST;\n    }\n    if (this.partial) {\n      flags |= OPTS_PARTIAL;\n    }\n    // If batchSize is different to this.numberToReturn\n    if (this.batchSize !== this.numberToReturn) this.numberToReturn = this.batchSize;\n    // Allocate write protocol header buffer\n    const header = Buffer.alloc(4 * 4 +\n    // Header\n    4 +\n    // Flags\n    Buffer.byteLength(this.ns) + 1 +\n    // namespace\n    4 +\n    // numberToSkip\n    4 // numberToReturn\n    );\n    // Add header to buffers\n    buffers.push(header);\n    // Serialize the query\n    const query = BSON.serialize(this.query, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n    // Add query document\n    buffers.push(query);\n    if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n      // Serialize the projection document\n      projection = BSON.serialize(this.returnFieldSelector, {\n        checkKeys: this.checkKeys,\n        serializeFunctions: this.serializeFunctions,\n        ignoreUndefined: this.ignoreUndefined\n      });\n      // Add projection document\n      buffers.push(projection);\n    }\n    // Total message size\n    const totalLength = header.length + query.length + (projection ? projection.length : 0);\n    // Set up the index\n    let index = 4;\n    // Write total document length\n    header[3] = totalLength >> 24 & 0xff;\n    header[2] = totalLength >> 16 & 0xff;\n    header[1] = totalLength >> 8 & 0xff;\n    header[0] = totalLength & 0xff;\n    // Write header information requestId\n    header[index + 3] = this.requestId >> 24 & 0xff;\n    header[index + 2] = this.requestId >> 16 & 0xff;\n    header[index + 1] = this.requestId >> 8 & 0xff;\n    header[index] = this.requestId & 0xff;\n    index = index + 4;\n    // Write header information responseTo\n    header[index + 3] = 0 >> 24 & 0xff;\n    header[index + 2] = 0 >> 16 & 0xff;\n    header[index + 1] = 0 >> 8 & 0xff;\n    header[index] = 0 & 0xff;\n    index = index + 4;\n    // Write header information OP_QUERY\n    header[index + 3] = constants_1.OP_QUERY >> 24 & 0xff;\n    header[index + 2] = constants_1.OP_QUERY >> 16 & 0xff;\n    header[index + 1] = constants_1.OP_QUERY >> 8 & 0xff;\n    header[index] = constants_1.OP_QUERY & 0xff;\n    index = index + 4;\n    // Write header information flags\n    header[index + 3] = flags >> 24 & 0xff;\n    header[index + 2] = flags >> 16 & 0xff;\n    header[index + 1] = flags >> 8 & 0xff;\n    header[index] = flags & 0xff;\n    index = index + 4;\n    // Write collection name\n    index = index + header.write(this.ns, index, 'utf8') + 1;\n    header[index - 1] = 0;\n    // Write header information flags numberToSkip\n    header[index + 3] = this.numberToSkip >> 24 & 0xff;\n    header[index + 2] = this.numberToSkip >> 16 & 0xff;\n    header[index + 1] = this.numberToSkip >> 8 & 0xff;\n    header[index] = this.numberToSkip & 0xff;\n    index = index + 4;\n    // Write header information flags numberToReturn\n    header[index + 3] = this.numberToReturn >> 24 & 0xff;\n    header[index + 2] = this.numberToReturn >> 16 & 0xff;\n    header[index + 1] = this.numberToReturn >> 8 & 0xff;\n    header[index] = this.numberToReturn & 0xff;\n    index = index + 4;\n    // Return the buffers\n    return buffers;\n  }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */\nclass OpQueryResponse {\n  constructor(message, msgHeader, msgBody, opts) {\n    this.documents = new Array(0);\n    /** moreToCome is an OP_MSG only concept */\n    this.moreToCome = false;\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n    // Flag values\n    this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues = typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers = typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n  }\n  isParsed() {\n    return this.parsed;\n  }\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {};\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    let bsonSize;\n    // Set up the options\n    const _options = {\n      useBigInt64,\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp\n    };\n    // Position within OP_REPLY at which documents start\n    // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n    this.index = 20;\n    // Read the message body\n    this.responseFlags = this.data.readInt32LE(0);\n    this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n    this.startingFrom = this.data.readInt32LE(12);\n    this.numberReturned = this.data.readInt32LE(16);\n    // Preallocate document array\n    this.documents = new Array(this.numberReturned);\n    this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n    this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n    this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n    this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n    // Parse Body\n    for (let i = 0; i < this.numberReturned; i++) {\n      bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;\n      // If we have raw results specified slice the return document\n      if (raw) {\n        this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n      } else {\n        this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n      }\n      // Adjust the index\n      this.index = this.index + bsonSize;\n    }\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    }\n    // Set parsed\n    this.parsed = true;\n  }\n}\nexports.OpQueryResponse = OpQueryResponse;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass OpMsgRequest {\n  constructor(databaseName, command, options) {\n    this.databaseName = databaseName;\n    this.command = command;\n    this.options = options;\n    // Basic options needed to be passed in\n    if (command == null) throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n    // Basic options\n    this.command.$db = databaseName;\n    // Ensure empty options\n    this.options = options ?? {};\n    // Additional options\n    this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n    // Serialization option\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n    // flags\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed = typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n    const header = Buffer.alloc(4 * 4 +\n    // Header\n    4 // Flags\n    );\n    buffers.push(header);\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n    header.writeInt32LE(totalLength, 0); // messageLength\n    header.writeInt32LE(this.requestId, 4); // requestID\n    header.writeInt32LE(0, 8); // responseTo\n    header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n    header.writeUInt32LE(flags, 16); // flags\n    return buffers;\n  }\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n  serializeBson(document) {\n    return BSON.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n  static getRequestId() {\n    _requestId = _requestId + 1 & 0x7fffffff;\n    return _requestId;\n  }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */\nclass OpMsgResponse {\n  constructor(message, msgHeader, msgBody, opts) {\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n    // Read response flags\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues = typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers = typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    this.documents = [];\n  }\n  isParsed() {\n    return this.parsed;\n  }\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {};\n    this.index = 4;\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    const validation = this.parseBsonSerializationOptions(options);\n    // Set up the options\n    const bsonOptions = {\n      useBigInt64,\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp,\n      validation\n      // Due to the strictness of the BSON libraries validation option we need this cast\n    };\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n      if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n        this.index += bsonSize;\n      } else if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n        // TODO(NODE-3483): Replace with MongoDeprecationError\n        throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n      }\n    }\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      bsonOptions.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0], bsonOptions);\n      this.documents = [doc];\n    }\n    this.parsed = true;\n  }\n  parseBsonSerializationOptions({\n    enableUtf8Validation\n  }) {\n    if (enableUtf8Validation === false) {\n      return {\n        utf8: false\n      };\n    }\n    return {\n      utf8: {\n        writeErrors: false\n      }\n    };\n  }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nclass OpCompressedRequest {\n  constructor(command, options) {\n    this.command = command;\n    this.options = options;\n  }\n  // Return whether a command contains an uncompressible command term\n  // Will return true if command contains no uncompressible command terms\n  static canCompress(command) {\n    const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n    const commandName = Object.keys(commandDoc)[0];\n    return !compression_1.uncompressibleCommands.has(commandName);\n  }\n  async toBin() {\n    const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n    // otherwise, compress the message\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n    // Compress the message body\n    const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n    // Create the msgHeader of OP_COMPRESSED\n    const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n    msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n    msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n    msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n    msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n    // Create the compression details of OP_COMPRESSED\n    const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n    compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n    compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n    compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n    return [msgHeader, compressionDetails, compressedMessage];\n  }\n}\nexports.OpCompressedRequest = OpCompressedRequest;","map":{"version":3,"names":["BSON","require","error_1","compression_1","constants_1","_requestId","OPTS_TAILABLE_CURSOR","OPTS_SECONDARY","OPTS_OPLOG_REPLAY","OPTS_NO_CURSOR_TIMEOUT","OPTS_AWAIT_DATA","OPTS_EXHAUST","OPTS_PARTIAL","CURSOR_NOT_FOUND","QUERY_FAILURE","SHARD_CONFIG_STALE","AWAIT_CAPABLE","OpQueryRequest","constructor","databaseName","query","options","ns","MongoRuntimeError","indexOf","numberToSkip","numberToReturn","returnFieldSelector","undefined","requestId","getRequestId","pre32Limit","serializeFunctions","ignoreUndefined","maxBsonSize","checkKeys","batchSize","tailable","secondaryOk","oplogReplay","noCursorTimeout","awaitData","exhaust","partial","incRequestId","nextRequestId","toBin","buffers","projection","flags","header","Buffer","alloc","byteLength","push","serialize","Object","keys","length","totalLength","index","OP_QUERY","write","exports","OpQueryResponse","message","msgHeader","msgBody","opts","documents","Array","moreToCome","parsed","raw","data","useBigInt64","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","responseTo","opCode","fromCompressed","isParsed","parse","documentsReturnedIn","bsonSize","_options","responseFlags","readInt32LE","cursorId","Long","startingFrom","numberReturned","cursorNotFound","queryFailure","shardConfigStale","awaitCapable","i","slice","deserialize","fieldsAsRaw","doc","OPTS_CHECKSUM_PRESENT","OPTS_MORE_TO_COME","OPTS_EXHAUST_ALLOWED","OpMsgRequest","command","MongoInvalidArgumentError","$db","checksumPresent","exhaustAllowed","makeDocumentSegment","writeInt32LE","OP_MSG","writeUInt32LE","document","payloadTypeBuffer","documentBuffer","serializeBson","OpMsgResponse","validation","parseBsonSerializationOptions","bsonOptions","payloadType","readUInt8","readUInt32LE","bin","enableUtf8Validation","utf8","writeErrors","MESSAGE_HEADER_SIZE","COMPRESSION_DETAILS_SIZE","OpCompressedRequest","canCompress","commandDoc","commandName","uncompressibleCommands","has","concatenatedOriginalCommandBuffer","concat","messageToBeCompressed","originalCommandOpCode","compressedMessage","compress","OP_COMPRESSED","compressionDetails","writeUInt8","Compressor","agreedCompressor"],"sources":["/Users/jerrybenoit/Desktop/Moveout_Project/moveout/node_modules/mongodb/src/cmap/commands.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document, Long } from '../bson';\nimport * as BSON from '../bson';\nimport { MongoInvalidArgumentError, MongoRuntimeError } from '../error';\nimport { type ReadPreference } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport type { CommandOptions } from './connection';\nimport {\n  compress,\n  Compressor,\n  type CompressorName,\n  uncompressibleCommands\n} from './wire_protocol/compression';\nimport { OP_COMPRESSED, OP_MSG, OP_QUERY } from './wire_protocol/constants';\n\n// Incrementing request id\nlet _requestId = 0;\n\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n\n/** @internal */\nexport type WriteProtocolMessageType = OpQueryRequest | OpMsgRequest;\n\n/** @internal */\nexport interface OpQueryOptions extends CommandOptions {\n  socketTimeoutMS?: number;\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  numberToSkip?: number;\n  numberToReturn?: number;\n  returnFieldSelector?: Document;\n  pre32Limit?: number;\n  serializeFunctions?: boolean;\n  ignoreUndefined?: boolean;\n  maxBsonSize?: number;\n  checkKeys?: boolean;\n  secondaryOk?: boolean;\n\n  requestId?: number;\n  moreToCome?: boolean;\n  exhaustAllowed?: boolean;\n}\n\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nexport class OpQueryRequest {\n  ns: string;\n  numberToSkip: number;\n  numberToReturn: number;\n  returnFieldSelector?: Document;\n  requestId: number;\n  pre32Limit?: number;\n  serializeFunctions: boolean;\n  ignoreUndefined: boolean;\n  maxBsonSize: number;\n  checkKeys: boolean;\n  batchSize: number;\n  tailable: boolean;\n  secondaryOk: boolean;\n  oplogReplay: boolean;\n  noCursorTimeout: boolean;\n  awaitData: boolean;\n  exhaust: boolean;\n  partial: boolean;\n\n  constructor(public databaseName: string, public query: Document, options: OpQueryOptions) {\n    // Basic options needed to be passed in\n    // TODO(NODE-3483): Replace with MongoCommandError\n    const ns = `${databaseName}.$cmd`;\n    if (typeof databaseName !== 'string') {\n      throw new MongoRuntimeError('Database name must be a string for a query');\n    }\n    // TODO(NODE-3483): Replace with MongoCommandError\n    if (query == null) throw new MongoRuntimeError('A query document must be specified for query');\n\n    // Validate that we are not passing 0x00 in the collection name\n    if (ns.indexOf('\\x00') !== -1) {\n      // TODO(NODE-3483): Use MongoNamespace static method\n      throw new MongoRuntimeError('Namespace cannot contain a null character');\n    }\n\n    // Basic options\n    this.ns = ns;\n\n    // Additional options\n    this.numberToSkip = options.numberToSkip || 0;\n    this.numberToReturn = options.numberToReturn || 0;\n    this.returnFieldSelector = options.returnFieldSelector || undefined;\n    this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n\n    // special case for pre-3.2 find commands, delete ASAP\n    this.pre32Limit = options.pre32Limit;\n\n    // Serialization option\n    this.serializeFunctions =\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined =\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.batchSize = this.numberToReturn;\n\n    // Flags\n    this.tailable = false;\n    this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n    this.oplogReplay = false;\n    this.noCursorTimeout = false;\n    this.awaitData = false;\n    this.exhaust = false;\n    this.partial = false;\n  }\n\n  /** Assign next request Id. */\n  incRequestId(): void {\n    this.requestId = _requestId++;\n  }\n\n  /** Peek next request Id. */\n  nextRequestId(): number {\n    return _requestId + 1;\n  }\n\n  /** Increment then return next request Id. */\n  static getRequestId(): number {\n    return ++_requestId;\n  }\n\n  // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n  toBin(): Uint8Array[] {\n    const buffers = [];\n    let projection = null;\n\n    // Set up the flags\n    let flags = 0;\n    if (this.tailable) {\n      flags |= OPTS_TAILABLE_CURSOR;\n    }\n\n    if (this.secondaryOk) {\n      flags |= OPTS_SECONDARY;\n    }\n\n    if (this.oplogReplay) {\n      flags |= OPTS_OPLOG_REPLAY;\n    }\n\n    if (this.noCursorTimeout) {\n      flags |= OPTS_NO_CURSOR_TIMEOUT;\n    }\n\n    if (this.awaitData) {\n      flags |= OPTS_AWAIT_DATA;\n    }\n\n    if (this.exhaust) {\n      flags |= OPTS_EXHAUST;\n    }\n\n    if (this.partial) {\n      flags |= OPTS_PARTIAL;\n    }\n\n    // If batchSize is different to this.numberToReturn\n    if (this.batchSize !== this.numberToReturn) this.numberToReturn = this.batchSize;\n\n    // Allocate write protocol header buffer\n    const header = Buffer.alloc(\n      4 * 4 + // Header\n        4 + // Flags\n        Buffer.byteLength(this.ns) +\n        1 + // namespace\n        4 + // numberToSkip\n        4 // numberToReturn\n    );\n\n    // Add header to buffers\n    buffers.push(header);\n\n    // Serialize the query\n    const query = BSON.serialize(this.query, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n\n    // Add query document\n    buffers.push(query);\n\n    if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n      // Serialize the projection document\n      projection = BSON.serialize(this.returnFieldSelector, {\n        checkKeys: this.checkKeys,\n        serializeFunctions: this.serializeFunctions,\n        ignoreUndefined: this.ignoreUndefined\n      });\n      // Add projection document\n      buffers.push(projection);\n    }\n\n    // Total message size\n    const totalLength = header.length + query.length + (projection ? projection.length : 0);\n\n    // Set up the index\n    let index = 4;\n\n    // Write total document length\n    header[3] = (totalLength >> 24) & 0xff;\n    header[2] = (totalLength >> 16) & 0xff;\n    header[1] = (totalLength >> 8) & 0xff;\n    header[0] = totalLength & 0xff;\n\n    // Write header information requestId\n    header[index + 3] = (this.requestId >> 24) & 0xff;\n    header[index + 2] = (this.requestId >> 16) & 0xff;\n    header[index + 1] = (this.requestId >> 8) & 0xff;\n    header[index] = this.requestId & 0xff;\n    index = index + 4;\n\n    // Write header information responseTo\n    header[index + 3] = (0 >> 24) & 0xff;\n    header[index + 2] = (0 >> 16) & 0xff;\n    header[index + 1] = (0 >> 8) & 0xff;\n    header[index] = 0 & 0xff;\n    index = index + 4;\n\n    // Write header information OP_QUERY\n    header[index + 3] = (OP_QUERY >> 24) & 0xff;\n    header[index + 2] = (OP_QUERY >> 16) & 0xff;\n    header[index + 1] = (OP_QUERY >> 8) & 0xff;\n    header[index] = OP_QUERY & 0xff;\n    index = index + 4;\n\n    // Write header information flags\n    header[index + 3] = (flags >> 24) & 0xff;\n    header[index + 2] = (flags >> 16) & 0xff;\n    header[index + 1] = (flags >> 8) & 0xff;\n    header[index] = flags & 0xff;\n    index = index + 4;\n\n    // Write collection name\n    index = index + header.write(this.ns, index, 'utf8') + 1;\n    header[index - 1] = 0;\n\n    // Write header information flags numberToSkip\n    header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n    header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n    header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n    header[index] = this.numberToSkip & 0xff;\n    index = index + 4;\n\n    // Write header information flags numberToReturn\n    header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n    header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n    header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n    header[index] = this.numberToReturn & 0xff;\n    index = index + 4;\n\n    // Return the buffers\n    return buffers;\n  }\n}\n\n/** @internal */\nexport interface MessageHeader {\n  length: number;\n  requestId: number;\n  responseTo: number;\n  opCode: number;\n  fromCompressed?: boolean;\n}\n\n/** @internal */\nexport interface OpResponseOptions extends BSONSerializeOptions {\n  documentsReturnedIn?: string | null;\n}\n\n/** @internal */\nexport class OpQueryResponse {\n  parsed: boolean;\n  raw: Buffer;\n  data: Buffer;\n  opts: OpResponseOptions;\n  length: number;\n  requestId: number;\n  responseTo: number;\n  opCode: number;\n  fromCompressed?: boolean;\n  responseFlags?: number;\n  cursorId?: Long;\n  startingFrom?: number;\n  numberReturned?: number;\n  documents: (Document | Buffer)[] = new Array(0);\n  cursorNotFound?: boolean;\n  queryFailure?: boolean;\n  shardConfigStale?: boolean;\n  awaitCapable?: boolean;\n  useBigInt64: boolean;\n  promoteLongs: boolean;\n  promoteValues: boolean;\n  promoteBuffers: boolean;\n  bsonRegExp?: boolean;\n  index?: number;\n\n  /** moreToCome is an OP_MSG only concept */\n  moreToCome = false;\n\n  constructor(\n    message: Buffer,\n    msgHeader: MessageHeader,\n    msgBody: Buffer,\n    opts?: OpResponseOptions\n  ) {\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Flag values\n    this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues =\n      typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers =\n      typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n  }\n\n  isParsed(): boolean {\n    return this.parsed;\n  }\n\n  parse(options: OpResponseOptions): void {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {};\n\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    let bsonSize;\n\n    // Set up the options\n    const _options: BSONSerializeOptions = {\n      useBigInt64,\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp\n    };\n\n    // Position within OP_REPLY at which documents start\n    // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n    this.index = 20;\n\n    // Read the message body\n    this.responseFlags = this.data.readInt32LE(0);\n    this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n    this.startingFrom = this.data.readInt32LE(12);\n    this.numberReturned = this.data.readInt32LE(16);\n\n    // Preallocate document array\n    this.documents = new Array(this.numberReturned);\n\n    this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n    this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n    this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n    this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n\n    // Parse Body\n    for (let i = 0; i < this.numberReturned; i++) {\n      bsonSize =\n        this.data[this.index] |\n        (this.data[this.index + 1] << 8) |\n        (this.data[this.index + 2] << 16) |\n        (this.data[this.index + 3] << 24);\n\n      // If we have raw results specified slice the return document\n      if (raw) {\n        this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n      } else {\n        this.documents[i] = BSON.deserialize(\n          this.data.slice(this.index, this.index + bsonSize),\n          _options\n        );\n      }\n\n      // Adjust the index\n      this.index = this.index + bsonSize;\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw: Document = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n\n      const doc = BSON.deserialize(this.documents[0] as Buffer, _options);\n      this.documents = [doc];\n    }\n\n    // Set parsed\n    this.parsed = true;\n  }\n}\n\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n\n/** @internal */\nexport interface OpMsgOptions {\n  requestId: number;\n  serializeFunctions: boolean;\n  ignoreUndefined: boolean;\n  checkKeys: boolean;\n  maxBsonSize: number;\n  moreToCome: boolean;\n  exhaustAllowed: boolean;\n  readPreference: ReadPreference;\n}\n\n/** @internal */\nexport class OpMsgRequest {\n  requestId: number;\n  serializeFunctions: boolean;\n  ignoreUndefined: boolean;\n  checkKeys: boolean;\n  maxBsonSize: number;\n  checksumPresent: boolean;\n  moreToCome: boolean;\n  exhaustAllowed: boolean;\n\n  constructor(\n    public databaseName: string,\n    public command: Document,\n    public options: OpQueryOptions\n  ) {\n    // Basic options needed to be passed in\n    if (command == null)\n      throw new MongoInvalidArgumentError('Query document must be specified for query');\n\n    // Basic options\n    this.command.$db = databaseName;\n\n    // Ensure empty options\n    this.options = options ?? {};\n\n    // Additional options\n    this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n\n    // Serialization option\n    this.serializeFunctions =\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined =\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n\n    // flags\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed =\n      typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  toBin(): Buffer[] {\n    const buffers: Buffer[] = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(\n      4 * 4 + // Header\n        4 // Flags\n    );\n\n    buffers.push(header);\n\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n\n    header.writeInt32LE(totalLength, 0); // messageLength\n    header.writeInt32LE(this.requestId, 4); // requestID\n    header.writeInt32LE(0, 8); // responseTo\n    header.writeInt32LE(OP_MSG, 12); // opCode\n    header.writeUInt32LE(flags, 16); // flags\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers: Uint8Array[], document: Document): number {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document: Document): Uint8Array {\n    return BSON.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n\n  static getRequestId(): number {\n    _requestId = (_requestId + 1) & 0x7fffffff;\n    return _requestId;\n  }\n}\n\n/** @internal */\nexport class OpMsgResponse {\n  parsed: boolean;\n  raw: Buffer;\n  data: Buffer;\n  opts: OpResponseOptions;\n  length: number;\n  requestId: number;\n  responseTo: number;\n  opCode: number;\n  fromCompressed?: boolean;\n  responseFlags: number;\n  checksumPresent: boolean;\n  /** Indicates the server will be sending more responses on this connection */\n  moreToCome: boolean;\n  exhaustAllowed: boolean;\n  useBigInt64: boolean;\n  promoteLongs: boolean;\n  promoteValues: boolean;\n  promoteBuffers: boolean;\n  bsonRegExp: boolean;\n  documents: (Document | Buffer)[];\n  index?: number;\n\n  constructor(\n    message: Buffer,\n    msgHeader: MessageHeader,\n    msgBody: Buffer,\n    opts?: OpResponseOptions\n  ) {\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Read response flags\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues =\n      typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers =\n      typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n\n    this.documents = [];\n  }\n\n  isParsed(): boolean {\n    return this.parsed;\n  }\n\n  parse(options: OpResponseOptions): void {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {};\n\n    this.index = 4;\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    const validation = this.parseBsonSerializationOptions(options);\n\n    // Set up the options\n    const bsonOptions: BSONSerializeOptions = {\n      useBigInt64,\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp,\n      validation\n      // Due to the strictness of the BSON libraries validation option we need this cast\n    } as BSONSerializeOptions & { validation: { utf8: { writeErrors: boolean } } };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n      if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n        this.index += bsonSize;\n      } else if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n\n        // TODO(NODE-3483): Replace with MongoDeprecationError\n        throw new MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw: Document = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      bsonOptions.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0] as Buffer, bsonOptions);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n\n  parseBsonSerializationOptions({ enableUtf8Validation }: BSONSerializeOptions): {\n    utf8: { writeErrors: false } | false;\n  } {\n    if (enableUtf8Validation === false) {\n      return { utf8: false };\n    }\n\n    return { utf8: { writeErrors: false } };\n  }\n}\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nexport class OpCompressedRequest {\n  constructor(\n    private command: WriteProtocolMessageType,\n    private options: { zlibCompressionLevel: number; agreedCompressor: CompressorName }\n  ) {}\n\n  // Return whether a command contains an uncompressible command term\n  // Will return true if command contains no uncompressible command terms\n  static canCompress(command: WriteProtocolMessageType) {\n    const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n    const commandName = Object.keys(commandDoc)[0];\n    return !uncompressibleCommands.has(commandName);\n  }\n\n  async toBin(): Promise<Buffer[]> {\n    const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n    // otherwise, compress the message\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n\n    // Compress the message body\n    const compressedMessage = await compress(this.options, messageToBeCompressed);\n    // Create the msgHeader of OP_COMPRESSED\n    const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n    msgHeader.writeInt32LE(\n      MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length,\n      0\n    ); // messageLength\n    msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n    msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n    msgHeader.writeInt32LE(OP_COMPRESSED, 12); // opCode\n\n    // Create the compression details of OP_COMPRESSED\n    const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n    compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n    compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n    compressionDetails.writeUInt8(Compressor[this.options.agreedCompressor], 8); // compressorID\n    return [msgHeader, compressionDetails, compressedMessage];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}