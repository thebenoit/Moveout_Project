{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = require(\"./cmap/auth/gssapi\");\nconst mongocr_1 = require(\"./cmap/auth/mongocr\");\nconst mongodb_aws_1 = require(\"./cmap/auth/mongodb_aws\");\nconst mongodb_oidc_1 = require(\"./cmap/auth/mongodb_oidc\");\nconst plain_1 = require(\"./cmap/auth/plain\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst scram_1 = require(\"./cmap/auth/scram\");\nconst x509_1 = require(\"./cmap/auth/x509\");\nconst error_1 = require(\"./error\");\n/** @internal */\nconst AUTH_PROVIDERS = new Map([[providers_1.AuthMechanism.MONGODB_AWS, () => new mongodb_aws_1.MongoDBAWS()], [providers_1.AuthMechanism.MONGODB_CR, () => new mongocr_1.MongoCR()], [providers_1.AuthMechanism.MONGODB_GSSAPI, () => new gssapi_1.GSSAPI()], [providers_1.AuthMechanism.MONGODB_OIDC, () => new mongodb_oidc_1.MongoDBOIDC()], [providers_1.AuthMechanism.MONGODB_PLAIN, () => new plain_1.Plain()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, () => new scram_1.ScramSHA1()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, () => new scram_1.ScramSHA256()], [providers_1.AuthMechanism.MONGODB_X509, () => new x509_1.X509()]]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nclass MongoClientAuthProviders {\n  constructor() {\n    this.existingProviders = new Map();\n  }\n  /**\n   * Get or create an authentication provider based on the provided mechanism.\n   * We don't want to create all providers at once, as some providers may not be used.\n   * @param name - The name of the provider to get or create.\n   * @returns The provider.\n   * @throws MongoInvalidArgumentError if the mechanism is not supported.\n   * @internal\n   */\n  getOrCreateProvider(name) {\n    const authProvider = this.existingProviders.get(name);\n    if (authProvider) {\n      return authProvider;\n    }\n    const provider = AUTH_PROVIDERS.get(name)?.();\n    if (!provider) {\n      throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n    }\n    this.existingProviders.set(name, provider);\n    return provider;\n  }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders;","map":{"version":3,"names":["gssapi_1","require","mongocr_1","mongodb_aws_1","mongodb_oidc_1","plain_1","providers_1","scram_1","x509_1","error_1","AUTH_PROVIDERS","Map","AuthMechanism","MONGODB_AWS","MongoDBAWS","MONGODB_CR","MongoCR","MONGODB_GSSAPI","GSSAPI","MONGODB_OIDC","MongoDBOIDC","MONGODB_PLAIN","Plain","MONGODB_SCRAM_SHA1","ScramSHA1","MONGODB_SCRAM_SHA256","ScramSHA256","MONGODB_X509","X509","MongoClientAuthProviders","constructor","existingProviders","getOrCreateProvider","name","authProvider","get","provider","MongoInvalidArgumentError","set","exports"],"sources":["/Users/jerrybenoit/Desktop/Moveout_Project/moveout/node_modules/mongodb/src/mongo_client_auth_providers.ts"],"sourcesContent":["import { type AuthProvider } from './cmap/auth/auth_provider';\nimport { GSSAPI } from './cmap/auth/gssapi';\nimport { MongoCR } from './cmap/auth/mongocr';\nimport { MongoDBAWS } from './cmap/auth/mongodb_aws';\nimport { MongoDBOIDC } from './cmap/auth/mongodb_oidc';\nimport { Plain } from './cmap/auth/plain';\nimport { AuthMechanism } from './cmap/auth/providers';\nimport { ScramSHA1, ScramSHA256 } from './cmap/auth/scram';\nimport { X509 } from './cmap/auth/x509';\nimport { MongoInvalidArgumentError } from './error';\n\n/** @internal */\nconst AUTH_PROVIDERS = new Map<AuthMechanism | string, () => AuthProvider>([\n  [AuthMechanism.MONGODB_AWS, () => new MongoDBAWS()],\n  [AuthMechanism.MONGODB_CR, () => new MongoCR()],\n  [AuthMechanism.MONGODB_GSSAPI, () => new GSSAPI()],\n  [AuthMechanism.MONGODB_OIDC, () => new MongoDBOIDC()],\n  [AuthMechanism.MONGODB_PLAIN, () => new Plain()],\n  [AuthMechanism.MONGODB_SCRAM_SHA1, () => new ScramSHA1()],\n  [AuthMechanism.MONGODB_SCRAM_SHA256, () => new ScramSHA256()],\n  [AuthMechanism.MONGODB_X509, () => new X509()]\n]);\n\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nexport class MongoClientAuthProviders {\n  private existingProviders: Map<AuthMechanism | string, AuthProvider> = new Map();\n\n  /**\n   * Get or create an authentication provider based on the provided mechanism.\n   * We don't want to create all providers at once, as some providers may not be used.\n   * @param name - The name of the provider to get or create.\n   * @returns The provider.\n   * @throws MongoInvalidArgumentError if the mechanism is not supported.\n   * @internal\n   */\n  getOrCreateProvider(name: AuthMechanism | string): AuthProvider {\n    const authProvider = this.existingProviders.get(name);\n    if (authProvider) {\n      return authProvider;\n    }\n\n    const provider = AUTH_PROVIDERS.get(name)?.();\n    if (!provider) {\n      throw new MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n    }\n\n    this.existingProviders.set(name, provider);\n    return provider;\n  }\n}\n"],"mappings":";;;;;;AACA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,aAAA,GAAAF,OAAA;AACA,MAAAG,cAAA,GAAAH,OAAA;AACA,MAAAI,OAAA,GAAAJ,OAAA;AACA,MAAAK,WAAA,GAAAL,OAAA;AACA,MAAAM,OAAA,GAAAN,OAAA;AACA,MAAAO,MAAA,GAAAP,OAAA;AACA,MAAAQ,OAAA,GAAAR,OAAA;AAEA;AACA,MAAMS,cAAc,GAAG,IAAIC,GAAG,CAA6C,CACzE,CAACL,WAAA,CAAAM,aAAa,CAACC,WAAW,EAAE,MAAM,IAAIV,aAAA,CAAAW,UAAU,EAAE,CAAC,EACnD,CAACR,WAAA,CAAAM,aAAa,CAACG,UAAU,EAAE,MAAM,IAAIb,SAAA,CAAAc,OAAO,EAAE,CAAC,EAC/C,CAACV,WAAA,CAAAM,aAAa,CAACK,cAAc,EAAE,MAAM,IAAIjB,QAAA,CAAAkB,MAAM,EAAE,CAAC,EAClD,CAACZ,WAAA,CAAAM,aAAa,CAACO,YAAY,EAAE,MAAM,IAAIf,cAAA,CAAAgB,WAAW,EAAE,CAAC,EACrD,CAACd,WAAA,CAAAM,aAAa,CAACS,aAAa,EAAE,MAAM,IAAIhB,OAAA,CAAAiB,KAAK,EAAE,CAAC,EAChD,CAAChB,WAAA,CAAAM,aAAa,CAACW,kBAAkB,EAAE,MAAM,IAAIhB,OAAA,CAAAiB,SAAS,EAAE,CAAC,EACzD,CAAClB,WAAA,CAAAM,aAAa,CAACa,oBAAoB,EAAE,MAAM,IAAIlB,OAAA,CAAAmB,WAAW,EAAE,CAAC,EAC7D,CAACpB,WAAA,CAAAM,aAAa,CAACe,YAAY,EAAE,MAAM,IAAInB,MAAA,CAAAoB,IAAI,EAAE,CAAC,CAC/C,CAAC;AAEF;;;;;AAKA,MAAaC,wBAAwB;EAArCC,YAAA;IACU,KAAAC,iBAAiB,GAA8C,IAAIpB,GAAG,EAAE;EAwBlF;EAtBE;;;;;;;;EAQAqB,mBAAmBA,CAACC,IAA4B;IAC9C,MAAMC,YAAY,GAAG,IAAI,CAACH,iBAAiB,CAACI,GAAG,CAACF,IAAI,CAAC;IACrD,IAAIC,YAAY,EAAE;MAChB,OAAOA,YAAY;;IAGrB,MAAME,QAAQ,GAAG1B,cAAc,CAACyB,GAAG,CAACF,IAAI,CAAC,GAAE,CAAE;IAC7C,IAAI,CAACG,QAAQ,EAAE;MACb,MAAM,IAAI3B,OAAA,CAAA4B,yBAAyB,CAAC,iBAAiBJ,IAAI,gBAAgB,CAAC;;IAG5E,IAAI,CAACF,iBAAiB,CAACO,GAAG,CAACL,IAAI,EAAEG,QAAQ,CAAC;IAC1C,OAAOA,QAAQ;EACjB;;AAxBFG,OAAA,CAAAV,wBAAA,GAAAA,wBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}