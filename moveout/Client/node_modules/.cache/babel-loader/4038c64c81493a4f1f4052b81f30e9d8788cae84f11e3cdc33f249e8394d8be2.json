{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst client_metadata_1 = require(\"../cmap/handshake/client_metadata\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n  auto: 'auto',\n  poll: 'poll',\n  stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    super();\n    /** @internal */\n    this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n    this[kServer] = server;\n    this.connection = null;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n      serverMonitoringMode: options.serverMonitoringMode\n    });\n    this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = {\n      id: '<monitor>',\n      generation: server.pool.generation,\n      cancellationToken,\n      hostAddress: server.description.hostAddress,\n      ...options,\n      // force BSON serialization options\n      raw: false,\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    };\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n  requestCheck() {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n    this[kMonitorId]?.wake();\n  }\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // close monitor\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n  monitor.rttPinger?.close();\n  monitor.rttPinger = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  monitor.connection?.destroy();\n  monitor.connection = null;\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n  // If we have no topology version we always poll no matter\n  // what the user provided, since the server does not support\n  // the streaming protocol.\n  if (topologyVersion == null) return false;\n  const serverMonitoringMode = monitor.options.serverMonitoringMode;\n  if (serverMonitoringMode === exports.ServerMonitoringMode.poll) return false;\n  if (serverMonitoringMode === exports.ServerMonitoringMode.stream) return true;\n  // If we are in auto mode, we need to figure out if we're in a FaaS\n  // environment or not and choose the appropriate mode.\n  if (monitor.isRunningInFaasEnv) return false;\n  return true;\n}\nfunction checkServer(monitor, callback) {\n  let start;\n  let awaited;\n  const topologyVersion = monitor[kServer].description.topologyVersion;\n  const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n  monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n  function onHeartbeatFailed(err) {\n    monitor.connection?.destroy();\n    monitor.connection = null;\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n    const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), {\n      cause: err\n    }) : err;\n    error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n    if (error instanceof error_1.MongoNetworkTimeoutError) {\n      error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n    }\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n  function onHeartbeatSucceeded(hello) {\n    if (!('isWritablePrimary' in hello)) {\n      // Provide hello-style response document.\n      hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    const duration = isAwaitable && monitor.rttPinger ? monitor.rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n    if (isAwaitable) {\n      // If we are using the streaming protocol then we immediately issue another 'started'\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n      // We have not actually sent an outgoing handshake, but when we get the next response we\n      // want the duration to reflect the time since we last heard from the server\n      start = (0, utils_1.now)();\n    } else {\n      monitor.rttPinger?.close();\n      monitor.rttPinger = undefined;\n      callback(undefined, hello);\n    }\n  }\n  const {\n    connection\n  } = monitor;\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor.rttPinger == null) {\n      monitor.rttPinger = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n    // Record new start time before sending handshake\n    start = (0, utils_1.now)();\n    if (isAwaitable) {\n      awaited = true;\n      return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello) => {\n        if (error) return onHeartbeatFailed(error);\n        return onHeartbeatSucceeded(hello);\n      });\n    }\n    awaited = false;\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options).then(onHeartbeatSucceeded, onHeartbeatFailed);\n    return;\n  }\n  // connecting does an implicit `hello`\n  (async () => {\n    const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n    const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n    // The start time is after socket creation but before the handshake\n    start = (0, utils_1.now)();\n    try {\n      await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n      return connection;\n    } catch (error) {\n      connection.destroy();\n      throw error;\n    }\n  })().then(connection => {\n    if (isInCloseState(monitor)) {\n      connection.destroy();\n      return;\n    }\n    monitor.connection = connection;\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n    callback(undefined, connection.hello);\n  }, error => {\n    monitor.connection = null;\n    awaited = false;\n    onHeartbeatFailed(error);\n  });\n}\nfunction monitorServer(monitor) {\n  return callback => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n        (0, timers_1.setTimeout)(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this.connection = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n  close() {\n    this.closed = true;\n    (0, timers_1.clearTimeout)(this[kMonitorId]);\n    this.connection?.destroy();\n    this.connection = undefined;\n  }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn?.destroy();\n      return;\n    }\n    if (rttPinger.connection == null) {\n      rttPinger.connection = conn;\n    }\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n  const connection = rttPinger.connection;\n  if (connection == null) {\n    (0, connect_1.connect)(options).then(connection => {\n      measureAndReschedule(connection);\n    }, () => {\n      rttPinger.connection = undefined;\n      rttPinger[kRoundTripTime] = 0;\n    });\n    return;\n  }\n  const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n  connection.command((0, utils_1.ns)('admin.$cmd'), {\n    [commandName]: 1\n  }, undefined).then(() => measureAndReschedule(), () => {\n    rttPinger.connection?.destroy();\n    rttPinger.connection = undefined;\n    rttPinger[kRoundTripTime] = 0;\n    return;\n  });\n}\n/**\n * @internal\n */\nclass MonitorInterval {\n  constructor(fn, options = {}) {\n    this.isExpeditedCallToFnScheduled = false;\n    this.stopped = false;\n    this.isExecutionInProgress = false;\n    this.hasExecutedOnce = false;\n    this._executeAndReschedule = () => {\n      if (this.stopped) return;\n      if (this.timerId) {\n        (0, timers_1.clearTimeout)(this.timerId);\n      }\n      this.isExpeditedCallToFnScheduled = false;\n      this.isExecutionInProgress = true;\n      this.fn(() => {\n        this.lastExecutionEnded = (0, utils_1.now)();\n        this.isExecutionInProgress = false;\n        this._reschedule(this.heartbeatFrequencyMS);\n      });\n    };\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n  wake() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n    if (this.isExecutionInProgress) {\n      return;\n    }\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n    this._executeAndReschedule();\n  }\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n      this.timerId = undefined;\n    }\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  toJSON() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n  _reschedule(ms) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n    }\n    this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n}\nexports.MonitorInterval = MonitorInterval;","map":{"version":3,"names":["timers_1","require","bson_1","connect_1","client_metadata_1","constants_1","error_1","mongo_logger_1","mongo_types_1","utils_1","common_1","events_1","server_1","kServer","Symbol","kMonitorId","kCancellationToken","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","makeStateMachine","STATE_CLOSING","STATE_CLOSED","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","exports","ServerMonitoringMode","Object","freeze","auto","poll","stream","Monitor","TypedEventEmitter","constructor","server","options","component","MongoLoggableComponent","TOPOLOGY","connection","CancellationToken","setMaxListeners","Infinity","undefined","address","description","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","serverMonitoringMode","isRunningInFaasEnv","getFAASEnv","mongoLogger","topology","client","cancellationToken","connectOptions","id","generation","pool","hostAddress","raw","useBigInt64","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connect","MonitorInterval","monitorServer","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","stop","rttPinger","destroy","useStreamingProtocol","checkServer","callback","start","awaited","isAwaitable","emitAndLogHeartbeat","Server","SERVER_HEARTBEAT_STARTED","ServerHeartbeatStartedEvent","onHeartbeatFailed","err","SERVER_HEARTBEAT_FAILED","ServerHeartbeatFailedEvent","calculateDurationInMs","error","MongoError","buildErrorMessage","cause","addErrorLabel","MongoErrorLabel","ResetPool","MongoNetworkTimeoutError","InterruptInUseConnections","onHeartbeatSucceeded","hello","isWritablePrimary","LEGACY_HELLO_COMMAND","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","connectionId","ServerHeartbeatSucceededEvent","now","closed","serverApi","helloOk","maxAwaitTimeMS","cmd","version","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","assign","exhaustCommand","ns","command","then","socket","makeSocket","makeConnection","performInitialHandshake","process","nextTick","done","type","ServerType","Unknown","setTimeout","tv","processId","counter","Long","isLong","fromNumber","measureRoundTripTime","clearTimeout","measureAndReschedule","conn","commandName","fn","isExpeditedCallToFnScheduled","stopped","isExecutionInProgress","hasExecutedOnce","_executeAndReschedule","timerId","lastExecutionEnded","_reschedule","currentTime","timeSinceLastCall","toString","JSON","stringify","toJSON","lastCallTime","isExpeditedCheckScheduled","ms"],"sources":["/Users/jerrybenoit/Desktop/Moveout_Project/moveout/node_modules/mongodb/src/sdam/monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { type Document, Long } from '../bson';\nimport { connect, makeConnection, makeSocket, performInitialHandshake } from '../cmap/connect';\nimport type { Connection, ConnectionOptions } from '../cmap/connection';\nimport { getFAASEnv } from '../cmap/handshake/client_metadata';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoError, MongoErrorLabel, MongoNetworkTimeoutError } from '../error';\nimport { MongoLoggableComponent } from '../mongo_logger';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback, EventEmitterWithState } from '../utils';\nimport { calculateDurationInMs, makeStateMachine, now, ns } from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @public */\nexport const ServerMonitoringMode = Object.freeze({\n  auto: 'auto',\n  poll: 'poll',\n  stream: 'stream'\n} as const);\n\n/** @public */\nexport type ServerMonitoringMode = (typeof ServerMonitoringMode)[keyof typeof ServerMonitoringMode];\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  serverMonitoringMode: ServerMonitoringMode;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: MongoError): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<\n      MonitorOptions,\n      | 'connectTimeoutMS'\n      | 'heartbeatFrequencyMS'\n      | 'minHeartbeatFrequencyMS'\n      | 'serverMonitoringMode'\n    >\n  >;\n  connectOptions: ConnectionOptions;\n  isRunningInFaasEnv: boolean;\n  [kServer]: Server;\n  connection: Connection | null;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: MonitorInterval;\n  rttPinger?: RTTPinger;\n  /** @internal */\n  override component = MongoLoggableComponent.TOPOLOGY;\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this.connection = null;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n      serverMonitoringMode: options.serverMonitoringMode\n    });\n    this.isRunningInFaasEnv = getFAASEnv() != null;\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = {\n      id: '<monitor>' as const,\n      generation: server.pool.generation,\n      cancellationToken,\n      hostAddress: server.description.hostAddress,\n      ...options,\n      // force BSON serialization options\n      raw: false,\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    };\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor.rttPinger?.close();\n  monitor.rttPinger = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor.connection?.destroy();\n  monitor.connection = null;\n}\n\nfunction useStreamingProtocol(monitor: Monitor, topologyVersion: TopologyVersion | null): boolean {\n  // If we have no topology version we always poll no matter\n  // what the user provided, since the server does not support\n  // the streaming protocol.\n  if (topologyVersion == null) return false;\n\n  const serverMonitoringMode = monitor.options.serverMonitoringMode;\n  if (serverMonitoringMode === ServerMonitoringMode.poll) return false;\n  if (serverMonitoringMode === ServerMonitoringMode.stream) return true;\n\n  // If we are in auto mode, we need to figure out if we're in a FaaS\n  // environment or not and choose the appropriate mode.\n  if (monitor.isRunningInFaasEnv) return false;\n  return true;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start: number;\n  let awaited: boolean;\n  const topologyVersion = monitor[kServer].description.topologyVersion;\n  const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n  monitor.emitAndLogHeartbeat(\n    Server.SERVER_HEARTBEAT_STARTED,\n    monitor[kServer].topology.s.id,\n    undefined,\n    new ServerHeartbeatStartedEvent(monitor.address, isAwaitable)\n  );\n\n  function onHeartbeatFailed(err: Error) {\n    monitor.connection?.destroy();\n    monitor.connection = null;\n\n    monitor.emitAndLogHeartbeat(\n      Server.SERVER_HEARTBEAT_FAILED,\n      monitor[kServer].topology.s.id,\n      undefined,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err, awaited)\n    );\n\n    const error = !(err instanceof MongoError)\n      ? new MongoError(MongoError.buildErrorMessage(err), { cause: err })\n      : err;\n    error.addErrorLabel(MongoErrorLabel.ResetPool);\n    if (error instanceof MongoNetworkTimeoutError) {\n      error.addErrorLabel(MongoErrorLabel.InterruptInUseConnections);\n    }\n\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n\n  function onHeartbeatSucceeded(hello: Document) {\n    if (!('isWritablePrimary' in hello)) {\n      // Provide hello-style response document.\n      hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n    }\n\n    const duration =\n      isAwaitable && monitor.rttPinger\n        ? monitor.rttPinger.roundTripTime\n        : calculateDurationInMs(start);\n\n    monitor.emitAndLogHeartbeat(\n      Server.SERVER_HEARTBEAT_SUCCEEDED,\n      monitor[kServer].topology.s.id,\n      hello.connectionId,\n      new ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable)\n    );\n\n    if (isAwaitable) {\n      // If we are using the streaming protocol then we immediately issue another 'started'\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      monitor.emitAndLogHeartbeat(\n        Server.SERVER_HEARTBEAT_STARTED,\n        monitor[kServer].topology.s.id,\n        undefined,\n        new ServerHeartbeatStartedEvent(monitor.address, true)\n      );\n      // We have not actually sent an outgoing handshake, but when we get the next response we\n      // want the duration to reflect the time since we last heard from the server\n      start = now();\n    } else {\n      monitor.rttPinger?.close();\n      monitor.rttPinger = undefined;\n\n      callback(undefined, hello);\n    }\n  }\n\n  const { connection } = monitor;\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor.rttPinger == null) {\n      monitor.rttPinger = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    // Record new start time before sending handshake\n    start = now();\n\n    if (isAwaitable) {\n      awaited = true;\n      return connection.exhaustCommand(ns('admin.$cmd'), cmd, options, (error, hello) => {\n        if (error) return onHeartbeatFailed(error);\n        return onHeartbeatSucceeded(hello);\n      });\n    }\n\n    awaited = false;\n    connection\n      .command(ns('admin.$cmd'), cmd, options)\n      .then(onHeartbeatSucceeded, onHeartbeatFailed);\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  (async () => {\n    const socket = await makeSocket(monitor.connectOptions);\n    const connection = makeConnection(monitor.connectOptions, socket);\n    // The start time is after socket creation but before the handshake\n    start = now();\n    try {\n      await performInitialHandshake(connection, monitor.connectOptions);\n      return connection;\n    } catch (error) {\n      connection.destroy();\n      throw error;\n    }\n  })().then(\n    connection => {\n      if (isInCloseState(monitor)) {\n        connection.destroy();\n        return;\n      }\n\n      monitor.connection = connection;\n      monitor.emitAndLogHeartbeat(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        monitor[kServer].topology.s.id,\n        connection.hello?.connectionId,\n        new ServerHeartbeatSucceededEvent(\n          monitor.address,\n          calculateDurationInMs(start),\n          connection.hello,\n          useStreamingProtocol(monitor, connection.hello?.topologyVersion)\n        )\n      );\n\n      callback(undefined, connection.hello);\n    },\n    error => {\n      monitor.connection = null;\n      awaited = false;\n      onHeartbeatFailed(error);\n    }\n  );\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  connection?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this.connection = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this.connection?.destroy();\n    this.connection = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy();\n      return;\n    }\n\n    if (rttPinger.connection == null) {\n      rttPinger.connection = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger.connection;\n  if (connection == null) {\n    connect(options).then(\n      connection => {\n        measureAndReschedule(connection);\n      },\n      () => {\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n      }\n    );\n    return;\n  }\n\n  const commandName =\n    connection.serverApi?.version || connection.helloOk ? 'hello' : LEGACY_HELLO_COMMAND;\n  connection.command(ns('admin.$cmd'), { [commandName]: 1 }, undefined).then(\n    () => measureAndReschedule(),\n    () => {\n      rttPinger.connection?.destroy();\n      rttPinger.connection = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n  );\n}\n\n/**\n * @internal\n */\nexport interface MonitorIntervalOptions {\n  /** The interval to execute a method on */\n  heartbeatFrequencyMS: number;\n  /** A minimum interval that must elapse before the method is called */\n  minHeartbeatFrequencyMS: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n}\n\n/**\n * @internal\n */\nexport class MonitorInterval {\n  fn: (callback: Callback) => void;\n  timerId: NodeJS.Timeout | undefined;\n  lastExecutionEnded: number;\n  isExpeditedCallToFnScheduled = false;\n  stopped = false;\n  isExecutionInProgress = false;\n  hasExecutedOnce = false;\n\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n\n  constructor(fn: (callback: Callback) => void, options: Partial<MonitorIntervalOptions> = {}) {\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n\n  wake() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n\n    if (this.isExecutionInProgress) {\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n\n    this._executeAndReschedule();\n  }\n\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = undefined;\n    }\n\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  toJSON() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n\n  private _reschedule(ms?: number) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.timerId = setTimeout(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n\n  private _executeAndReschedule = () => {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.isExpeditedCallToFnScheduled = false;\n    this.isExecutionInProgress = true;\n\n    this.fn(() => {\n      this.lastExecutionEnded = now();\n      this.isExecutionInProgress = false;\n      this._reschedule(this.heartbeatFrequencyMS);\n    });\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}