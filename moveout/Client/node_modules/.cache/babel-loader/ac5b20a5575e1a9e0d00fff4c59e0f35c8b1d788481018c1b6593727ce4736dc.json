{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst monitor_1 = require(\"./sdam/monitor\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n  if (typeof options.srvHost !== 'string') {\n    throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n  // Asynchronously start TXT resolution so that we do not have to wait until\n  // the SRV record is resolved before starting a second DNS query.\n  const lookupAddress = options.srvHost;\n  const txtResolutionPromise = dns.promises.resolveTxt(lookupAddress);\n  txtResolutionPromise.catch(() => {\n    /* rejections will be handled later */\n  });\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n  if (addresses.length === 0) {\n    throw new error_1.MongoAPIError('No addresses found at host');\n  }\n  for (const {\n    name\n  } of addresses) {\n    if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n      throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n  const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  // Use the result of resolving the TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await txtResolutionPromise;\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n  if (record.length > 1) {\n    throw new error_1.MongoParseError('Multiple text records not allowed');\n  }\n  const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n  if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n      source\n    });\n  }\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n  const check = (a, b) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n  }\n}\nfunction getIntFromOptions(name, value) {\n  const parsedInt = (0, utils_1.parseInteger)(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction* entriesFromString(value) {\n  if (value === '') {\n    return;\n  }\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(/:(.*)/);\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    yield [key, value];\n  }\n}\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = url.searchParams.getAll(key);\n    const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n    if (!isReadPreferenceTags && values.length > 1) {\n      throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n    }\n    if (!isReadPreferenceTags && values.includes('')) {\n      throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n        throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n      }\n    }\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  const allProvidedOptions = new CaseInsensitiveMap();\n  const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || []).concat(allProvidedOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  checkTLSOptions(allProvidedOptions);\n  const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  // Option parsing and setting\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (exports.DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const {\n        deprecated\n      } = descriptor;\n      if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n    if ((isGssapi || isX509) && allProvidedOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allProvidedOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n  let loggerEnvOptions = {};\n  let loggerClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath,\n      mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n      mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n    };\n  }\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n  mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n  mongoOptions.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(mongoOptions.metadata).catch(() => {\n    /* rejections will be handled later */\n  });\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform\n  } = descriptor;\n  const name = target ?? key;\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = options.credentials?.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({\n      options,\n      values\n    }) {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!(0, utils_1.isRecord)(optionValue)) {\n            throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = {\n            ...optionValue\n          };\n        }\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({\n      name,\n      values: [value]\n    }) {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({\n      values: [value],\n      options\n    }) {\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform({\n      values: [value]\n    }) {\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }) {\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverMonitoringMode: {\n    default: 'auto',\n    transform({\n      values: [value]\n    }) {\n      if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n        throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n      }\n      return value;\n    }\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  timeoutMS: {\n    type: 'uint'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    type: 'string'\n  },\n  tlsCRLFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy options from v3 era\n  useNewUrlParser: {\n    type: 'boolean',\n    deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  },\n  useUnifiedTopology: {\n    type: 'boolean',\n    deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  },\n  // MongoLogger\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongodbLogPath: {\n    transform({\n      values: [value]\n    }) {\n      if (!(typeof value === 'string' && ['stderr', 'stdout'].includes(value) || value && typeof value === 'object' && 'write' in value && typeof value.write === 'function')) {\n        throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n      }\n      return value;\n    }\n  },\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongodbLogComponentSeverities: {\n    transform({\n      values: [value]\n    }) {\n      if (typeof value !== 'object' || !value) {\n        throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n      }\n      for (const [k, v] of Object.entries(value)) {\n        if (typeof v !== 'string' || typeof k !== 'string') {\n          throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n        }\n        if (!Object.values(mongo_logger_1.MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n          throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n        }\n        if (!Object.values(mongo_logger_1.SeverityLevel).some(val => val === v)) {\n          throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n        }\n      }\n      return value;\n    }\n  },\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongodbLogMaxDocumentLength: {\n    type: 'uint'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => descriptor.default != null).map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect'), Symbol.for('@@mdb.enableMongoLogger'), Symbol.for('@@mdb.internalLoggerConfig')]);","map":{"version":3,"names":["dns","require","mongodb_connection_string_url_1","url_1","mongo_credentials_1","providers_1","client_metadata_1","compression_1","encrypter_1","error_1","mongo_client_1","mongo_logger_1","read_concern_1","read_preference_1","monitor_1","utils_1","write_concern_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","resolveSRVRecord","options","srvHost","MongoAPIError","split","length","lookupAddress","txtResolutionPromise","promises","resolveTxt","catch","addresses","resolveSrv","srvServiceName","name","matchesParentDomain","hostAddresses","map","r","HostAddress","fromString","port","validateLoadBalancedOptions","record","error","code","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","mechanism","MongoCredentials","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","allOptions","check","a","b","getBoolean","value","getIntFromOptions","parsedInt","parseInteger","getUIntFromOptions","parsedValue","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","toLowerCase","set","delete","parseOptions","uri","mongoClient","MongoClient","useBigInt64","promoteLongs","promoteValues","url","default","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","FEATURE_FLAGS","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","isReadPreferenceTags","test","MongoInvalidArgumentError","objectOptions","filter","uriMechanismProperties","property","allProvidedOptions","allProvidedKeys","Set","objectOptionValue","push","urlValues","tlsAndSslOpts","concat","bind","size","unsupportedOptions","setDifference","Array","from","OPTIONS","s","optionWord","isOrAre","descriptor","DEFAULT_OPTIONS","setOption","deprecated","deprecatedMsg","emitWarning","isGssapi","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","isOidc","MONGODB_OIDC","MongoMissingCredentialsError","validate","MONGODB_DEFAULT","mechanismProperties","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","loggerFeatureFlag","Symbol","for","loggerEnvOptions","loggerClientOptions","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_CLIENT","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongodbLogComponentSeverities","mongodbLogMaxDocumentLength","mongoLoggerOptions","MongoLogger","resolveOptions","metadata","makeClientMetadata","extendedMetadata","addContainerMetadata","isSrv","target","type","transform","String","isRecord","transformValue","appName","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","optionValue","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","compressionList","compVal","compValArray","isArray","c","Compressor","add","connectTimeoutMS","driverInfo","enableUtf8Validation","family","fieldsAsRaw","forceServerObjectId","fsync","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","localThresholdMS","maxConnecting","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","DEFAULT_PK_FACTORY","createPk","promoteBuffers","readConcern","ReadConcern","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverMonitoringMode","ServerMonitoringMode","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","timeoutMS","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCRLFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","write","MongoLoggableComponent","val","SeverityLevel","d"],"sources":["/Users/jerrybenoit/Desktop/Moveout_Project/moveout/node_modules/mongodb/src/connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { addContainerMetadata, makeClientMetadata } from './cmap/handshake/client_metadata';\nimport { Compressor, type CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport {\n  MongoAPIError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoParseError\n} from './error';\nimport {\n  MongoClient,\n  type MongoClientOptions,\n  type MongoOptions,\n  type PkFactory,\n  type ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport {\n  MongoLoggableComponent,\n  MongoLogger,\n  type MongoLoggerEnvOptions,\n  type MongoLoggerMongoClientOptions,\n  SeverityLevel\n} from './mongo_logger';\nimport { ReadConcern, type ReadConcernLevel } from './read_concern';\nimport { ReadPreference, type ReadPreferenceMode } from './read_preference';\nimport { ServerMonitoringMode } from './sdam/monitor';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  HostAddress,\n  isRecord,\n  matchesParentDomain,\n  parseInteger,\n  setDifference\n} from './utils';\nimport { type W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport async function resolveSRVRecord(options: MongoOptions): Promise<HostAddress[]> {\n  if (typeof options.srvHost !== 'string') {\n    throw new MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n\n  // Asynchronously start TXT resolution so that we do not have to wait until\n  // the SRV record is resolved before starting a second DNS query.\n  const lookupAddress = options.srvHost;\n  const txtResolutionPromise = dns.promises.resolveTxt(lookupAddress);\n  txtResolutionPromise.catch(() => {\n    /* rejections will be handled later */\n  });\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const addresses = await dns.promises.resolveSrv(\n    `_${options.srvServiceName}._tcp.${lookupAddress}`\n  );\n\n  if (addresses.length === 0) {\n    throw new MongoAPIError('No addresses found at host');\n  }\n\n  for (const { name } of addresses) {\n    if (!matchesParentDomain(name, lookupAddress)) {\n      throw new MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n\n  const hostAddresses = addresses.map(r => HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  // Use the result of resolving the TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await txtResolutionPromise;\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n\n  if (record.length > 1) {\n    throw new MongoParseError('Multiple text records not allowed');\n  }\n\n  const txtRecordOptions = new URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n  if (\n    !options.userSpecifiedAuthSource &&\n    source &&\n    options.credentials &&\n    !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n  ) {\n    options.credentials = MongoCredentials.merge(options.credentials, { source });\n  }\n\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  return hostAddresses;\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions: CaseInsensitiveMap): void {\n  if (!allOptions) return;\n  const check = (a: string, b: string) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      throw new MongoParseError(`${name} must be either \"true\" or \"false\"`);\n  }\n}\n\nfunction getIntFromOptions(name: string, value: unknown): number {\n  const parsedInt = parseInteger(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name: string, value: unknown): number {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  if (value === '') {\n    return;\n  }\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(/:(.*)/);\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<unknown[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = url.searchParams.getAll(key);\n\n    const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n\n    if (!isReadPreferenceTags && values.length > 1) {\n      throw new MongoInvalidArgumentError(\n        `URI option \"${key}\" cannot appear more than once in the connection string`\n      );\n    }\n\n    if (!isReadPreferenceTags && values.includes('')) {\n      throw new MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap<unknown>(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property as string)) {\n        throw new MongoParseError(\n          'Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.'\n        );\n      }\n    }\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allProvidedOptions = new CaseInsensitiveMap<unknown[]>();\n\n  const allProvidedKeys = new Set<string>([...urlOptions.keys(), ...objectOptions.keys()]);\n\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n      .concat(allProvidedOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allProvidedOptions);\n\n  const unsupportedOptions = setDifference(\n    allProvidedKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const { deprecated } = descriptor;\n      if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_OIDC;\n    if (\n      (isGssapi || isX509) &&\n      allProvidedOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`\n      );\n    }\n\n    if (\n      !(isGssapi || isX509 || isAws || isOidc) &&\n      mongoOptions.dbName &&\n      !allProvidedOptions.has('authSource')\n    ) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new MongoMissingCredentialsError(\n        `When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`\n      );\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n\n  let loggerEnvOptions: MongoLoggerEnvOptions = {};\n  let loggerClientOptions: MongoLoggerMongoClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath,\n      mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n      mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n    };\n  }\n  mongoOptions.mongoLoggerOptions = MongoLogger.resolveOptions(\n    loggerEnvOptions,\n    loggerClientOptions\n  );\n\n  mongoOptions.metadata = makeClientMetadata(mongoOptions);\n\n  mongoOptions.extendedMetadata = addContainerMetadata(mongoOptions.metadata).catch(() => {\n    /* rejections will be handled later */\n  });\n\n  return mongoOptions;\n}\n\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): void {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform } = descriptor;\n  const name = target ?? key;\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values }): MongoCredentials {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!isRecord(optionValue)) {\n            throw new MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = { ...optionValue };\n        }\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverMonitoringMode: {\n    default: 'auto',\n    transform({ values: [value] }) {\n      if (!Object.values(ServerMonitoringMode).includes(value as any)) {\n        throw new MongoParseError(\n          'serverMonitoringMode must be one of `auto`, `poll`, or `stream`'\n        );\n      }\n      return value;\n    }\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  timeoutMS: {\n    type: 'uint'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    type: 'string'\n  },\n  tlsCRLFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy options from v3 era\n  useNewUrlParser: {\n    type: 'boolean',\n    deprecated:\n      'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  } as OptionDescriptor,\n  useUnifiedTopology: {\n    type: 'boolean',\n    deprecated:\n      'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  } as OptionDescriptor,\n  // MongoLogger\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongodbLogPath: {\n    transform({ values: [value] }) {\n      if (\n        !(\n          (typeof value === 'string' && ['stderr', 'stdout'].includes(value)) ||\n          (value &&\n            typeof value === 'object' &&\n            'write' in value &&\n            typeof value.write === 'function')\n        )\n      ) {\n        throw new MongoAPIError(\n          `Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`\n        );\n      }\n      return value;\n    }\n  },\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongodbLogComponentSeverities: {\n    transform({ values: [value] }) {\n      if (typeof value !== 'object' || !value) {\n        throw new MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n      }\n      for (const [k, v] of Object.entries(value)) {\n        if (typeof v !== 'string' || typeof k !== 'string') {\n          throw new MongoAPIError(\n            `User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`\n          );\n        }\n        if (!Object.values(MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n          throw new MongoAPIError(\n            `User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`\n          );\n        }\n        if (!Object.values(SeverityLevel).some(val => val === v)) {\n          throw new MongoAPIError(\n            `Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`\n          );\n        }\n      }\n      return value;\n    }\n  },\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongodbLogMaxDocumentLength: { type: 'uint' }\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([\n  Symbol.for('@@mdb.skipPingOnConnect'),\n  Symbol.for('@@mdb.enableMongoLogger'),\n  Symbol.for('@@mdb.internalLoggerConfig')\n]);\n"],"mappings":";;;;;;AAAA,MAAAA,GAAA,GAAAC,OAAA;AACA,MAAAC,+BAAA,GAAAD,OAAA;AACA,MAAAE,KAAA,GAAAF,OAAA;AAGA,MAAAG,mBAAA,GAAAH,OAAA;AACA,MAAAI,WAAA,GAAAJ,OAAA;AACA,MAAAK,iBAAA,GAAAL,OAAA;AACA,MAAAM,aAAA,GAAAN,OAAA;AACA,MAAAO,WAAA,GAAAP,OAAA;AACA,MAAAQ,OAAA,GAAAR,OAAA;AAMA,MAAAS,cAAA,GAAAT,OAAA;AAQA,MAAAU,cAAA,GAAAV,OAAA;AAOA,MAAAW,cAAA,GAAAX,OAAA;AACA,MAAAY,iBAAA,GAAAZ,OAAA;AACA,MAAAa,SAAA,GAAAb,OAAA;AAEA,MAAAc,OAAA,GAAAd,OAAA;AASA,MAAAe,eAAA,GAAAf,OAAA;AAEA,MAAMgB,iBAAiB,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,cAAc,CAAC;AAEtE,MAAMC,oBAAoB,GAAG,kEAAkE;AAC/F,MAAMC,oBAAoB,GAAG,4DAA4D;AACzF,MAAMC,0BAA0B,GAC9B,qEAAqE;AAEvE;;;;;;;AAOO,eAAeC,gBAAgBA,CAACC,OAAqB;EAC1D,IAAI,OAAOA,OAAO,CAACC,OAAO,KAAK,QAAQ,EAAE;IACvC,MAAM,IAAId,OAAA,CAAAe,aAAa,CAAC,oCAAoC,CAAC;;EAG/D,IAAIF,OAAO,CAACC,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;IACzC;IACA,MAAM,IAAIjB,OAAA,CAAAe,aAAa,CAAC,iDAAiD,CAAC;;EAG5E;EACA;EACA,MAAMG,aAAa,GAAGL,OAAO,CAACC,OAAO;EACrC,MAAMK,oBAAoB,GAAG5B,GAAG,CAAC6B,QAAQ,CAACC,UAAU,CAACH,aAAa,CAAC;EACnEC,oBAAoB,CAACG,KAAK,CAAC,MAAK;IAC9B;EAAA,CACD,CAAC;EAEF;EACA,MAAMC,SAAS,GAAG,MAAMhC,GAAG,CAAC6B,QAAQ,CAACI,UAAU,CAC7C,IAAIX,OAAO,CAACY,cAAc,SAASP,aAAa,EAAE,CACnD;EAED,IAAIK,SAAS,CAACN,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIjB,OAAA,CAAAe,aAAa,CAAC,4BAA4B,CAAC;;EAGvD,KAAK,MAAM;IAAEW;EAAI,CAAE,IAAIH,SAAS,EAAE;IAChC,IAAI,CAAC,IAAAjB,OAAA,CAAAqB,mBAAmB,EAACD,IAAI,EAAER,aAAa,CAAC,EAAE;MAC7C,MAAM,IAAIlB,OAAA,CAAAe,aAAa,CAAC,uDAAuD,CAAC;;;EAIpF,MAAMa,aAAa,GAAGL,SAAS,CAACM,GAAG,CAACC,CAAC,IAAIxB,OAAA,CAAAyB,WAAW,CAACC,UAAU,CAAC,GAAGF,CAAC,CAACJ,IAAI,IAAII,CAAC,CAACG,IAAI,IAAI,KAAK,EAAE,CAAC,CAAC;EAEhGC,2BAA2B,CAACN,aAAa,EAAEf,OAAO,EAAE,IAAI,CAAC;EAEzD;EACA,IAAIsB,MAAM;EACV,IAAI;IACFA,MAAM,GAAG,MAAMhB,oBAAoB;GACpC,CAAC,OAAOiB,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,IAAI,KAAK,SAAS,IAAID,KAAK,CAACC,IAAI,KAAK,WAAW,EAAE;MAC1D,MAAMD,KAAK;;IAEb,OAAOR,aAAa;;EAGtB,IAAIO,MAAM,CAAClB,MAAM,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIjB,OAAA,CAAAsC,eAAe,CAAC,mCAAmC,CAAC;;EAGhE,MAAMC,gBAAgB,GAAG,IAAI7C,KAAA,CAAA8C,eAAe,CAACL,MAAM,CAAC,CAAC,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC;EAChE,MAAMC,mBAAmB,GAAG,CAAC,GAAGH,gBAAgB,CAACI,IAAI,EAAE,CAAC;EACxD,IAAID,mBAAmB,CAACE,IAAI,CAACC,GAAG,IAAI,CAACrC,iBAAiB,CAACsC,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE;IACrE,MAAM,IAAI7C,OAAA,CAAAsC,eAAe,CAAC,oCAAoC9B,iBAAiB,CAACiC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;;EAG/F,IAAIjC,iBAAiB,CAACoC,IAAI,CAACG,MAAM,IAAIR,gBAAgB,CAACS,GAAG,CAACD,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;IACzE,MAAM,IAAI/C,OAAA,CAAAsC,eAAe,CAAC,gDAAgD,CAAC;;EAG7E,MAAMW,MAAM,GAAGV,gBAAgB,CAACS,GAAG,CAAC,YAAY,CAAC,IAAIE,SAAS;EAC9D,MAAMC,UAAU,GAAGZ,gBAAgB,CAACS,GAAG,CAAC,YAAY,CAAC,IAAIE,SAAS;EAClE,MAAME,YAAY,GAAGb,gBAAgB,CAACS,GAAG,CAAC,cAAc,CAAC,IAAIE,SAAS;EAEtE,IACE,CAACrC,OAAO,CAACwC,uBAAuB,IAChCJ,MAAM,IACNpC,OAAO,CAACyC,WAAW,IACnB,CAAC1D,WAAA,CAAA2D,4BAA4B,CAACC,GAAG,CAAC3C,OAAO,CAACyC,WAAW,CAACG,SAAS,CAAC,EAChE;IACA5C,OAAO,CAACyC,WAAW,GAAG3D,mBAAA,CAAA+D,gBAAgB,CAACC,KAAK,CAAC9C,OAAO,CAACyC,WAAW,EAAE;MAAEL;IAAM,CAAE,CAAC;;EAG/E,IAAI,CAACpC,OAAO,CAAC+C,uBAAuB,IAAIT,UAAU,EAAE;IAClDtC,OAAO,CAACsC,UAAU,GAAGA,UAAU;;EAGjC,IAAIC,YAAY,KAAK,MAAM,EAAE;IAC3BvC,OAAO,CAACuC,YAAY,GAAG,IAAI;;EAG7B,IAAIvC,OAAO,CAACsC,UAAU,IAAItC,OAAO,CAACgD,WAAW,GAAG,CAAC,EAAE;IACjD,MAAM,IAAI7D,OAAA,CAAAsC,eAAe,CAAC,mDAAmD,CAAC;;EAGhFJ,2BAA2B,CAACN,aAAa,EAAEf,OAAO,EAAE,IAAI,CAAC;EAEzD,OAAOe,aAAa;AACtB;AA1FAkC,OAAA,CAAAlD,gBAAA,GAAAA,gBAAA;AA4FA;;;;;;AAMA,SAASmD,eAAeA,CAACC,UAA8B;EACrD,IAAI,CAACA,UAAU,EAAE;EACjB,MAAMC,KAAK,GAAGA,CAACC,CAAS,EAAEC,CAAS,KAAI;IACrC,IAAIH,UAAU,CAACR,GAAG,CAACU,CAAC,CAAC,IAAIF,UAAU,CAACR,GAAG,CAACW,CAAC,CAAC,EAAE;MAC1C,MAAM,IAAInE,OAAA,CAAAe,aAAa,CAAC,QAAQmD,CAAC,qCAAqCC,CAAC,UAAU,CAAC;;EAEtF,CAAC;EACDF,KAAK,CAAC,aAAa,EAAE,6BAA6B,CAAC;EACnDA,KAAK,CAAC,aAAa,EAAE,0BAA0B,CAAC;EAChDA,KAAK,CAAC,aAAa,EAAE,sCAAsC,CAAC;EAC5DA,KAAK,CAAC,aAAa,EAAE,6BAA6B,CAAC;EACnDA,KAAK,CAAC,6BAA6B,EAAE,sCAAsC,CAAC;EAC5EA,KAAK,CAAC,6BAA6B,EAAE,6BAA6B,CAAC;EACnEA,KAAK,CAAC,sCAAsC,EAAE,6BAA6B,CAAC;AAC9E;AACA,SAASG,UAAUA,CAAC1C,IAAY,EAAE2C,KAAc;EAC9C,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE,OAAOA,KAAK;EAC5C,QAAQA,KAAK;IACX,KAAK,MAAM;MACT,OAAO,IAAI;IACb,KAAK,OAAO;MACV,OAAO,KAAK;IACd;MACE,MAAM,IAAIrE,OAAA,CAAAsC,eAAe,CAAC,GAAGZ,IAAI,mCAAmC,CAAC;;AAE3E;AAEA,SAAS4C,iBAAiBA,CAAC5C,IAAY,EAAE2C,KAAc;EACrD,MAAME,SAAS,GAAG,IAAAjE,OAAA,CAAAkE,YAAY,EAACH,KAAK,CAAC;EACrC,IAAIE,SAAS,IAAI,IAAI,EAAE;IACrB,OAAOA,SAAS;;EAElB,MAAM,IAAIvE,OAAA,CAAAsC,eAAe,CAAC,YAAYZ,IAAI,sCAAsC2C,KAAK,EAAE,CAAC;AAC1F;AAEA,SAASI,kBAAkBA,CAAC/C,IAAY,EAAE2C,KAAc;EACtD,MAAMK,WAAW,GAAGJ,iBAAiB,CAAC5C,IAAI,EAAE2C,KAAK,CAAC;EAClD,IAAIK,WAAW,GAAG,CAAC,EAAE;IACnB,MAAM,IAAI1E,OAAA,CAAAsC,eAAe,CAAC,GAAGZ,IAAI,2CAA2C2C,KAAK,EAAE,CAAC;;EAEtF,OAAOK,WAAW;AACpB;AAEA,UAAUC,iBAAiBA,CAACN,KAAa;EACvC,IAAIA,KAAK,KAAK,EAAE,EAAE;IAChB;;EAEF,MAAMO,aAAa,GAAGP,KAAK,CAACrD,KAAK,CAAC,GAAG,CAAC;EACtC,KAAK,MAAM6D,QAAQ,IAAID,aAAa,EAAE;IACpC,MAAM,CAAC/B,GAAG,EAAEwB,KAAK,CAAC,GAAGQ,QAAQ,CAAC7D,KAAK,CAAC,OAAO,CAAC;IAC5C,IAAIqD,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAIrE,OAAA,CAAAsC,eAAe,CAAC,iDAAiD,CAAC;;IAG9E,MAAM,CAACO,GAAG,EAAEwB,KAAK,CAAC;;AAEtB;AAEA,MAAMS,kBAAgC,SAAQC,GAAkB;EAC9DC,YAAYC,OAAA,GAAgC,EAAE;IAC5C,KAAK,CAACA,OAAO,CAACpD,GAAG,CAAC,CAAC,CAACqD,CAAC,EAAEC,CAAC,CAAC,KAAK,CAACD,CAAC,CAACE,WAAW,EAAE,EAAED,CAAC,CAAC,CAAC,CAAC;EACtD;EACS3B,GAAGA,CAAC0B,CAAS;IACpB,OAAO,KAAK,CAAC1B,GAAG,CAAC0B,CAAC,CAACE,WAAW,EAAE,CAAC;EACnC;EACSpC,GAAGA,CAACkC,CAAS;IACpB,OAAO,KAAK,CAAClC,GAAG,CAACkC,CAAC,CAACE,WAAW,EAAE,CAAC;EACnC;EACSC,GAAGA,CAACH,CAAS,EAAEC,CAAM;IAC5B,OAAO,KAAK,CAACE,GAAG,CAACH,CAAC,CAACE,WAAW,EAAE,EAAED,CAAC,CAAC;EACtC;EACSG,MAAMA,CAACJ,CAAS;IACvB,OAAO,KAAK,CAACI,MAAM,CAACJ,CAAC,CAACE,WAAW,EAAE,CAAC;EACtC;;AAGF,SAAgBG,YAAYA,CAC1BC,GAAW,EACXC,WAAA,GAA4DvC,SAAS,EACrErC,OAAA,GAA8B,EAAE;EAEhC,IAAI4E,WAAW,IAAI,IAAI,IAAI,EAAEA,WAAW,YAAYxF,cAAA,CAAAyF,WAAW,CAAC,EAAE;IAChE7E,OAAO,GAAG4E,WAAW;IACrBA,WAAW,GAAGvC,SAAS;;EAGzB;EACA,IAAIrC,OAAO,CAAC8E,WAAW,IAAI,OAAO9E,OAAO,CAAC+E,YAAY,KAAK,SAAS,IAAI,CAAC/E,OAAO,CAAC+E,YAAY,EAAE;IAC7F,MAAM,IAAI5F,OAAA,CAAAe,aAAa,CAAC,8DAA8D,CAAC;;EAGzF,IAAIF,OAAO,CAAC8E,WAAW,IAAI,OAAO9E,OAAO,CAACgF,aAAa,KAAK,SAAS,IAAI,CAAChF,OAAO,CAACgF,aAAa,EAAE;IAC/F,MAAM,IAAI7F,OAAA,CAAAe,aAAa,CAAC,8DAA8D,CAAC;;EAGzF,MAAM+E,GAAG,GAAG,IAAIrG,+BAAA,CAAAsG,OAAgB,CAACP,GAAG,CAAC;EACrC,MAAM;IAAEQ,KAAK;IAAEC;EAAK,CAAE,GAAGH,GAAG;EAE5B,MAAMI,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAExC;EACA,KAAK,MAAMC,IAAI,IAAIF,MAAM,CAACG,qBAAqB,CAACzF,OAAO,CAAC,EAAE;IACxD,IAAIiD,OAAA,CAAAyC,aAAa,CAAC/C,GAAG,CAAC6C,IAAI,CAAC,EAAE;MAC3BH,YAAY,CAACG,IAAI,CAAC,GAAGxF,OAAO,CAACwF,IAAI,CAAC;;;EAItCH,YAAY,CAACF,KAAK,GAAGC,KAAK,GAAG,EAAE,GAAGD,KAAK,CAACnE,GAAG,CAACvB,OAAA,CAAAyB,WAAW,CAACC,UAAU,CAAC;EAEnE,MAAMwE,UAAU,GAAG,IAAI1B,kBAAkB,EAAa;EAEtD,IAAIgB,GAAG,CAACW,QAAQ,KAAK,GAAG,IAAIX,GAAG,CAACW,QAAQ,KAAK,EAAE,EAAE;IAC/C,MAAMC,MAAM,GAAGC,kBAAkB,CAC/Bb,GAAG,CAACW,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGX,GAAG,CAACW,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGd,GAAG,CAACW,QAAQ,CAC/D;IACD,IAAIC,MAAM,EAAE;MACVF,UAAU,CAACnB,GAAG,CAAC,QAAQ,EAAE,CAACqB,MAAM,CAAC,CAAC;;;EAItC,IAAIZ,GAAG,CAACe,QAAQ,KAAK,EAAE,EAAE;IACvB,MAAMC,IAAI,GAAa;MACrBD,QAAQ,EAAEF,kBAAkB,CAACb,GAAG,CAACe,QAAQ;KAC1C;IAED,IAAI,OAAOf,GAAG,CAACiB,QAAQ,KAAK,QAAQ,EAAE;MACpCD,IAAI,CAACC,QAAQ,GAAGJ,kBAAkB,CAACb,GAAG,CAACiB,QAAQ,CAAC;;IAGlDP,UAAU,CAACnB,GAAG,CAAC,MAAM,EAAE,CAACyB,IAAI,CAAC,CAAC;;EAGhC,KAAK,MAAMjE,GAAG,IAAIiD,GAAG,CAACkB,YAAY,CAACrE,IAAI,EAAE,EAAE;IACzC,MAAMsE,MAAM,GAAGnB,GAAG,CAACkB,YAAY,CAACE,MAAM,CAACrE,GAAG,CAAC;IAE3C,MAAMsE,oBAAoB,GAAG,qBAAqB,CAACC,IAAI,CAACvE,GAAG,CAAC;IAE5D,IAAI,CAACsE,oBAAoB,IAAIF,MAAM,CAAChG,MAAM,GAAG,CAAC,EAAE;MAC9C,MAAM,IAAIjB,OAAA,CAAAqH,yBAAyB,CACjC,eAAexE,GAAG,yDAAyD,CAC5E;;IAGH,IAAI,CAACsE,oBAAoB,IAAIF,MAAM,CAACnE,QAAQ,CAAC,EAAE,CAAC,EAAE;MAChD,MAAM,IAAI9C,OAAA,CAAAe,aAAa,CAAC,eAAe8B,GAAG,qCAAqC,CAAC;;IAGlF,IAAI,CAAC2D,UAAU,CAAChD,GAAG,CAACX,GAAG,CAAC,EAAE;MACxB2D,UAAU,CAACnB,GAAG,CAACxC,GAAG,EAAEoE,MAAM,CAAC;;;EAI/B,MAAMK,aAAa,GAAG,IAAIxC,kBAAkB,CAC1CqB,MAAM,CAAClB,OAAO,CAACpE,OAAO,CAAC,CAAC0G,MAAM,CAAC,CAAC,GAAGpC,CAAC,CAAC,KAAKA,CAAC,IAAI,IAAI,CAAC,CACrD;EAED;EAEA,IAAIqB,UAAU,CAAChD,GAAG,CAAC,WAAW,CAAC,EAAE;IAC/B,MAAM,IAAIxD,OAAA,CAAAsC,eAAe,CACvB,qEAAqE,CACtE;;EAGH,MAAMkF,sBAAsB,GAAGhB,UAAU,CAACxD,GAAG,CAAC,yBAAyB,CAAC;EACxE,IAAIwE,sBAAsB,EAAE;IAC1B,KAAK,MAAMC,QAAQ,IAAID,sBAAsB,EAAE;MAC7C,IAAI,qBAAqB,CAACJ,IAAI,CAACK,QAAkB,CAAC,EAAE;QAClD,MAAM,IAAIzH,OAAA,CAAAsC,eAAe,CACvB,gFAAgF,CACjF;;;;EAKP,IAAIgF,aAAa,CAAC9D,GAAG,CAAC,cAAc,CAAC,EAAE;IACrC,MAAM,IAAIxD,OAAA,CAAAsC,eAAe,CAAC,gDAAgD,CAAC;;EAG7E;EAEA,MAAMoF,kBAAkB,GAAG,IAAI5C,kBAAkB,EAAa;EAE9D,MAAM6C,eAAe,GAAG,IAAIC,GAAG,CAAS,CAAC,GAAGpB,UAAU,CAAC7D,IAAI,EAAE,EAAE,GAAG2E,aAAa,CAAC3E,IAAI,EAAE,CAAC,CAAC;EAExF,KAAK,MAAME,GAAG,IAAI8E,eAAe,EAAE;IACjC,MAAMV,MAAM,GAAG,EAAE;IACjB,MAAMY,iBAAiB,GAAGP,aAAa,CAACtE,GAAG,CAACH,GAAG,CAAC;IAChD,IAAIgF,iBAAiB,IAAI,IAAI,EAAE;MAC7BZ,MAAM,CAACa,IAAI,CAACD,iBAAiB,CAAC;;IAGhC,MAAME,SAAS,GAAGvB,UAAU,CAACxD,GAAG,CAACH,GAAG,CAAC,IAAI,EAAE;IAC3CoE,MAAM,CAACa,IAAI,CAAC,GAAGC,SAAS,CAAC;IACzBL,kBAAkB,CAACrC,GAAG,CAACxC,GAAG,EAAEoE,MAAM,CAAC;;EAGrC,IAAIS,kBAAkB,CAAClE,GAAG,CAAC,KAAK,CAAC,IAAIkE,kBAAkB,CAAClE,GAAG,CAAC,KAAK,CAAC,EAAE;IAClE,MAAMwE,aAAa,GAAG,CAACN,kBAAkB,CAAC1E,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,EACvDiF,MAAM,CAACP,kBAAkB,CAAC1E,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAC3CnB,GAAG,CAACuC,UAAU,CAAC8D,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACxC,IAAI,IAAIN,GAAG,CAACI,aAAa,CAAC,CAACG,IAAI,KAAK,CAAC,EAAE;MACrC,MAAM,IAAInI,OAAA,CAAAsC,eAAe,CAAC,yCAAyC,CAAC;;;EAIxEyB,eAAe,CAAC2D,kBAAkB,CAAC;EAEnC,MAAMU,kBAAkB,GAAG,IAAA9H,OAAA,CAAA+H,aAAa,EACtCV,eAAe,EACfW,KAAK,CAACC,IAAI,CAACpC,MAAM,CAACxD,IAAI,CAACmB,OAAA,CAAA0E,OAAO,CAAC,CAAC,CAAC3G,GAAG,CAAC4G,CAAC,IAAIA,CAAC,CAACrD,WAAW,EAAE,CAAC,CAC3D;EACD,IAAIgD,kBAAkB,CAACD,IAAI,KAAK,CAAC,EAAE;IACjC,MAAMO,UAAU,GAAGN,kBAAkB,CAACD,IAAI,GAAG,CAAC,GAAG,SAAS,GAAG,QAAQ;IACrE,MAAMQ,OAAO,GAAGP,kBAAkB,CAACD,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI;IAC1D,MAAM,IAAInI,OAAA,CAAAsC,eAAe,CACvB,GAAGoG,UAAU,IAAIJ,KAAK,CAACC,IAAI,CAACH,kBAAkB,CAAC,CAAC3F,IAAI,CAAC,IAAI,CAAC,IAAIkG,OAAO,gBAAgB,CACtF;;EAGH;EAEA,KAAK,MAAM,CAAC9F,GAAG,EAAE+F,UAAU,CAAC,IAAIzC,MAAM,CAAClB,OAAO,CAACnB,OAAA,CAAA0E,OAAO,CAAC,EAAE;IACvD,MAAMvB,MAAM,GAAGS,kBAAkB,CAAC1E,GAAG,CAACH,GAAG,CAAC;IAC1C,IAAI,CAACoE,MAAM,IAAIA,MAAM,CAAChG,MAAM,KAAK,CAAC,EAAE;MAClC,IAAI6C,OAAA,CAAA+E,eAAe,CAACrF,GAAG,CAACX,GAAG,CAAC,EAAE;QAC5BiG,SAAS,CAAC5C,YAAY,EAAErD,GAAG,EAAE+F,UAAU,EAAE,CAAC9E,OAAA,CAAA+E,eAAe,CAAC7F,GAAG,CAACH,GAAG,CAAC,CAAC,CAAC;;KAEvE,MAAM;MACL,MAAM;QAAEkG;MAAU,CAAE,GAAGH,UAAU;MACjC,IAAIG,UAAU,EAAE;QACd,MAAMC,aAAa,GAAG,OAAOD,UAAU,KAAK,QAAQ,GAAG,KAAKA,UAAU,EAAE,GAAG,EAAE;QAC7E,IAAAzI,OAAA,CAAA2I,WAAW,EAAC,GAAGpG,GAAG,0BAA0BmG,aAAa,EAAE,CAAC;;MAG9DF,SAAS,CAAC5C,YAAY,EAAErD,GAAG,EAAE+F,UAAU,EAAE3B,MAAM,CAAC;;;EAIpD,IAAIf,YAAY,CAAC5C,WAAW,EAAE;IAC5B,MAAM4F,QAAQ,GAAGhD,YAAY,CAAC5C,WAAW,CAACG,SAAS,KAAK7D,WAAA,CAAAuJ,aAAa,CAACC,cAAc;IACpF,MAAMC,MAAM,GAAGnD,YAAY,CAAC5C,WAAW,CAACG,SAAS,KAAK7D,WAAA,CAAAuJ,aAAa,CAACG,YAAY;IAChF,MAAMC,KAAK,GAAGrD,YAAY,CAAC5C,WAAW,CAACG,SAAS,KAAK7D,WAAA,CAAAuJ,aAAa,CAACK,WAAW;IAC9E,MAAMC,MAAM,GAAGvD,YAAY,CAAC5C,WAAW,CAACG,SAAS,KAAK7D,WAAA,CAAAuJ,aAAa,CAACO,YAAY;IAChF,IACE,CAACR,QAAQ,IAAIG,MAAM,KACnB3B,kBAAkB,CAAClE,GAAG,CAAC,YAAY,CAAC,IACpC0C,YAAY,CAAC5C,WAAW,CAACL,MAAM,KAAK,WAAW,EAC/C;MACA;MACA,MAAM,IAAIjD,OAAA,CAAAsC,eAAe,CACvB,iBAAiB4D,YAAY,CAAC5C,WAAW,CAACG,SAAS,wCAAwC,CAC5F;;IAGH,IACE,EAAEyF,QAAQ,IAAIG,MAAM,IAAIE,KAAK,IAAIE,MAAM,CAAC,IACxCvD,YAAY,CAACQ,MAAM,IACnB,CAACgB,kBAAkB,CAAClE,GAAG,CAAC,YAAY,CAAC,EACrC;MACA;MACA;MACA0C,YAAY,CAAC5C,WAAW,GAAG3D,mBAAA,CAAA+D,gBAAgB,CAACC,KAAK,CAACuC,YAAY,CAAC5C,WAAW,EAAE;QAC1EL,MAAM,EAAEiD,YAAY,CAACQ;OACtB,CAAC;;IAGJ,IAAI6C,KAAK,IAAIrD,YAAY,CAAC5C,WAAW,CAACuD,QAAQ,IAAI,CAACX,YAAY,CAAC5C,WAAW,CAACyD,QAAQ,EAAE;MACpF,MAAM,IAAI/G,OAAA,CAAA2J,4BAA4B,CACpC,cAAczD,YAAY,CAAC5C,WAAW,CAACG,SAAS,oDAAoD,CACrG;;IAGHyC,YAAY,CAAC5C,WAAW,CAACsG,QAAQ,EAAE;IAEnC;IACA,IACE1D,YAAY,CAAC5C,WAAW,CAACyD,QAAQ,KAAK,EAAE,IACxCb,YAAY,CAAC5C,WAAW,CAACuD,QAAQ,KAAK,EAAE,IACxCX,YAAY,CAAC5C,WAAW,CAACG,SAAS,KAAK7D,WAAA,CAAAuJ,aAAa,CAACU,eAAe,IACpE1D,MAAM,CAACxD,IAAI,CAACuD,YAAY,CAAC5C,WAAW,CAACwG,mBAAmB,CAAC,CAAC7I,MAAM,KAAK,CAAC,EACtE;MACA,OAAOiF,YAAY,CAAC5C,WAAW;;;EAInC,IAAI,CAAC4C,YAAY,CAACQ,MAAM,EAAE;IACxB;IACAR,YAAY,CAACQ,MAAM,GAAG,MAAM;;EAG9BxE,2BAA2B,CAAC8D,KAAK,EAAEE,YAAY,EAAED,KAAK,CAAC;EAEvD,IAAIR,WAAW,IAAIS,YAAY,CAAC6D,cAAc,EAAE;IAC9ChK,WAAA,CAAAiK,SAAS,CAACC,kBAAkB,EAAE;IAC9B/D,YAAY,CAACgE,SAAS,GAAG,IAAInK,WAAA,CAAAiK,SAAS,CAACvE,WAAW,EAAED,GAAG,EAAE3E,OAAO,CAAC;IACjEqF,YAAY,CAACiE,aAAa,GAAGjE,YAAY,CAACgE,SAAS,CAACC,aAAa;;EAGnE;EAEAjE,YAAY,CAAC7C,uBAAuB,GAClCiE,aAAa,CAAC9D,GAAG,CAAC,YAAY,CAAC,IAAIgD,UAAU,CAAChD,GAAG,CAAC,YAAY,CAAC;EACjE0C,YAAY,CAACtC,uBAAuB,GAClC0D,aAAa,CAAC9D,GAAG,CAAC,YAAY,CAAC,IAAIgD,UAAU,CAAChD,GAAG,CAAC,YAAY,CAAC;EAEjE,IAAIyC,KAAK,EAAE;IACT;IACAC,YAAY,CAACpF,OAAO,GAAGkF,KAAK,CAAC,CAAC,CAAC;IAE/B,IAAIE,YAAY,CAACkE,gBAAgB,EAAE;MACjC,MAAM,IAAIpK,OAAA,CAAAe,aAAa,CAAC,2CAA2C,CAAC;;IAGtE,IAAImF,YAAY,CAACrC,WAAW,GAAG,CAAC,IAAI,OAAOqC,YAAY,CAAC/C,UAAU,KAAK,QAAQ,EAAE;MAC/E,MAAM,IAAInD,OAAA,CAAAsC,eAAe,CAAC,+CAA+C,CAAC;;IAG5E;IACA,MAAM+H,kBAAkB,GAAG,CAAC/C,aAAa,CAAC9D,GAAG,CAAC,KAAK,CAAC,IAAI,CAACgD,UAAU,CAAChD,GAAG,CAAC,KAAK,CAAC;IAC9E,MAAM8G,kBAAkB,GAAG,CAAChD,aAAa,CAAC9D,GAAG,CAAC,KAAK,CAAC,IAAI,CAACgD,UAAU,CAAChD,GAAG,CAAC,KAAK,CAAC;IAC9E,IAAI6G,kBAAkB,IAAIC,kBAAkB,EAAE;MAC5CpE,YAAY,CAACqE,GAAG,GAAG,IAAI;;GAE1B,MAAM;IACL,MAAMC,uBAAuB,GAC3BhE,UAAU,CAAChD,GAAG,CAAC,aAAa,CAAC,IAC7B8D,aAAa,CAAC9D,GAAG,CAAC,aAAa,CAAC,IAChCgD,UAAU,CAAChD,GAAG,CAAC,gBAAgB,CAAC,IAChC8D,aAAa,CAAC9D,GAAG,CAAC,gBAAgB,CAAC;IAErC,IAAIgH,uBAAuB,EAAE;MAC3B,MAAM,IAAIxK,OAAA,CAAAsC,eAAe,CACvB,2EAA2E,CAC5E;;;EAIL,IAAI4D,YAAY,CAACkE,gBAAgB,IAAIlE,YAAY,CAACF,KAAK,CAAC/E,MAAM,KAAK,CAAC,EAAE;IACpE,MAAM,IAAIjB,OAAA,CAAAsC,eAAe,CAAC,mDAAmD,CAAC;;EAGhF,IACE,CAAC4D,YAAY,CAACuE,SAAS,KACtBvE,YAAY,CAACwE,SAAS,IAAIxE,YAAY,CAACyE,aAAa,IAAIzE,YAAY,CAAC0E,aAAa,CAAC,EACpF;IACA,MAAM,IAAI5K,OAAA,CAAAsC,eAAe,CAAC,0DAA0D,CAAC;;EAGvF,IACG4D,YAAY,CAACyE,aAAa,IAAI,CAACzE,YAAY,CAAC0E,aAAa,IACzD,CAAC1E,YAAY,CAACyE,aAAa,IAAIzE,YAAY,CAAC0E,aAAc,EAC3D;IACA,MAAM,IAAI5K,OAAA,CAAAsC,eAAe,CAAC,6DAA6D,CAAC;;EAG1F,MAAMuI,YAAY,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC,CAAChJ,GAAG,CACnFgB,GAAG,IAAI2D,UAAU,CAACxD,GAAG,CAACH,GAAG,CAAC,IAAI,EAAE,CACjC;EAED,IAAIgI,YAAY,CAACjI,IAAI,CAAC/B,OAAO,IAAIA,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,EAAE;IACpD,MAAM,IAAIjB,OAAA,CAAAsC,eAAe,CACvB,2EAA2E,CAC5E;;EAGH,MAAMwI,iBAAiB,GAAGC,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC/D9E,YAAY,CAAC4E,iBAAiB,CAAC,GAAG5E,YAAY,CAAC4E,iBAAiB,CAAC,IAAI,KAAK;EAE1E,IAAIG,gBAAgB,GAA0B,EAAE;EAChD,IAAIC,mBAAmB,GAAkC,EAAE;EAC3D,IAAIhF,YAAY,CAAC4E,iBAAiB,CAAC,EAAE;IACnCG,gBAAgB,GAAG;MACjBE,mBAAmB,EAAEC,OAAO,CAACC,GAAG,CAACF,mBAAmB;MACpDG,oBAAoB,EAAEF,OAAO,CAACC,GAAG,CAACC,oBAAoB;MACtDC,4BAA4B,EAAEH,OAAO,CAACC,GAAG,CAACE,4BAA4B;MACtEC,sBAAsB,EAAEJ,OAAO,CAACC,GAAG,CAACG,sBAAsB;MAC1DC,kBAAkB,EAAEL,OAAO,CAACC,GAAG,CAACI,kBAAkB;MAClDC,eAAe,EAAEN,OAAO,CAACC,GAAG,CAACK,eAAe;MAC5CC,+BAA+B,EAAEP,OAAO,CAACC,GAAG,CAACM,+BAA+B;MAC5EC,gBAAgB,EAAER,OAAO,CAACC,GAAG,CAACO,gBAAgB;MAC9C,GAAG1F,YAAY,CAAC6E,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC;KACzD;IACDE,mBAAmB,GAAG;MACpBW,cAAc,EAAE3F,YAAY,CAAC2F,cAAc;MAC3CC,6BAA6B,EAAE5F,YAAY,CAAC4F,6BAA6B;MACzEC,2BAA2B,EAAE7F,YAAY,CAAC6F;KAC3C;;EAEH7F,YAAY,CAAC8F,kBAAkB,GAAG9L,cAAA,CAAA+L,WAAW,CAACC,cAAc,CAC1DjB,gBAAgB,EAChBC,mBAAmB,CACpB;EAEDhF,YAAY,CAACiG,QAAQ,GAAG,IAAAtM,iBAAA,CAAAuM,kBAAkB,EAAClG,YAAY,CAAC;EAExDA,YAAY,CAACmG,gBAAgB,GAAG,IAAAxM,iBAAA,CAAAyM,oBAAoB,EAACpG,YAAY,CAACiG,QAAQ,CAAC,CAAC7K,KAAK,CAAC,MAAK;IACrF;EAAA,CACD,CAAC;EAEF,OAAO4E,YAAY;AACrB;AArUApC,OAAA,CAAAyB,YAAA,GAAAA,YAAA;AAuUA;;;;;;;;;AASA,SAASrD,2BAA2BA,CAClC8D,KAA+B,EAC/BE,YAA0B,EAC1BqG,KAAc;EAEd,IAAIrG,YAAY,CAAC9C,YAAY,EAAE;IAC7B,IAAI4C,KAAK,CAAC/E,MAAM,GAAG,CAAC,EAAE;MACpB,MAAM,IAAIjB,OAAA,CAAAsC,eAAe,CAAC7B,oBAAoB,CAAC;;IAEjD,IAAIyF,YAAY,CAAC/C,UAAU,EAAE;MAC3B,MAAM,IAAInD,OAAA,CAAAsC,eAAe,CAAC5B,oBAAoB,CAAC;;IAEjD,IAAIwF,YAAY,CAACkE,gBAAgB,EAAE;MACjC,MAAM,IAAIpK,OAAA,CAAAsC,eAAe,CAAC3B,0BAA0B,CAAC;;IAGvD,IAAI4L,KAAK,IAAIrG,YAAY,CAACrC,WAAW,GAAG,CAAC,EAAE;MACzC,MAAM,IAAI7D,OAAA,CAAAsC,eAAe,CAAC,kDAAkD,CAAC;;;EAGjF;AACF;AAEA,SAASwG,SAASA,CAChB5C,YAAiB,EACjBrD,GAAW,EACX+F,UAA4B,EAC5B3B,MAAiB;EAEjB,MAAM;IAAEuF,MAAM;IAAEC,IAAI;IAAEC;EAAS,CAAE,GAAG9D,UAAU;EAC9C,MAAMlH,IAAI,GAAG8K,MAAM,IAAI3J,GAAG;EAE1B,QAAQ4J,IAAI;IACV,KAAK,SAAS;MACZvG,YAAY,CAACxE,IAAI,CAAC,GAAG0C,UAAU,CAAC1C,IAAI,EAAEuF,MAAM,CAAC,CAAC,CAAC,CAAC;MAChD;IACF,KAAK,KAAK;MACRf,YAAY,CAACxE,IAAI,CAAC,GAAG4C,iBAAiB,CAAC5C,IAAI,EAAEuF,MAAM,CAAC,CAAC,CAAC,CAAC;MACvD;IACF,KAAK,MAAM;MACTf,YAAY,CAACxE,IAAI,CAAC,GAAG+C,kBAAkB,CAAC/C,IAAI,EAAEuF,MAAM,CAAC,CAAC,CAAC,CAAC;MACxD;IACF,KAAK,QAAQ;MACX,IAAIA,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACrB;;MAEFf,YAAY,CAACxE,IAAI,CAAC,GAAGiL,MAAM,CAAC1F,MAAM,CAAC,CAAC,CAAC,CAAC;MACtC;IACF,KAAK,QAAQ;MACX,IAAI,CAAC,IAAA3G,OAAA,CAAAsM,QAAQ,EAAC3F,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACxB,MAAM,IAAIjH,OAAA,CAAAsC,eAAe,CAAC,GAAGZ,IAAI,oBAAoB,CAAC;;MAExDwE,YAAY,CAACxE,IAAI,CAAC,GAAGuF,MAAM,CAAC,CAAC,CAAC;MAC9B;IACF,KAAK,KAAK;MACRf,YAAY,CAACxE,IAAI,CAAC,GAAGuF,MAAM,CAAC,CAAC,CAAC;MAC9B;IACF;MAAS;QACP,IAAI,CAACyF,SAAS,EAAE;UACd,MAAM,IAAI1M,OAAA,CAAAsC,eAAe,CAAC,oDAAoD,CAAC;;QAEjF,MAAMuK,cAAc,GAAGH,SAAS,CAAC;UAAEhL,IAAI;UAAEb,OAAO,EAAEqF,YAAY;UAAEe;QAAM,CAAE,CAAC;QACzEf,YAAY,CAACxE,IAAI,CAAC,GAAGmL,cAAc;QACnC;;;AAGN;AAgBa/I,OAAA,CAAA0E,OAAO,GAAG;EACrBsE,OAAO,EAAE;IACPL,IAAI,EAAE;GACP;EACD3F,IAAI,EAAE;IACJ0F,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEhL,IAAI;MAAEb,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,IAAI,CAAC,IAAA/D,OAAA,CAAAsM,QAAQ,EAACvI,KAAK,EAAE,CAAC,UAAU,EAAE,UAAU,CAAU,CAAC,EAAE;QACvD,MAAM,IAAIrE,OAAA,CAAAsC,eAAe,CACvB,GAAGZ,IAAI,8DAA8D,CACtE;;MAEH,OAAO/B,mBAAA,CAAA+D,gBAAgB,CAACC,KAAK,CAAC9C,OAAO,CAACyC,WAAW,EAAE;QACjDuD,QAAQ,EAAExC,KAAK,CAACwC,QAAQ;QACxBE,QAAQ,EAAE1C,KAAK,CAAC0C;OACjB,CAAC;IACJ;GACD;EACDgG,aAAa,EAAE;IACbP,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAE7L,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACpC,MAAM2I,UAAU,GAAG7G,MAAM,CAACc,MAAM,CAACrH,WAAA,CAAAuJ,aAAa,CAAC;MAC/C,MAAM,CAAC1F,SAAS,CAAC,GAAGuJ,UAAU,CAACzF,MAAM,CAAC0F,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACC,MAAM,CAACR,MAAM,CAACS,GAAG,KAAK/I,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;MAC1F,IAAI,CAACZ,SAAS,EAAE;QACd,MAAM,IAAIzD,OAAA,CAAAsC,eAAe,CAAC,wBAAwB0K,UAAU,SAAS3I,KAAK,EAAE,CAAC;;MAE/E,IAAIpB,MAAM,GAAGpC,OAAO,CAACyC,WAAW,EAAEL,MAAM;MACxC,IACEQ,SAAS,KAAK7D,WAAA,CAAAuJ,aAAa,CAACkE,aAAa,IACzCzN,WAAA,CAAA2D,4BAA4B,CAACC,GAAG,CAACC,SAAS,CAAC,EAC3C;QACA;QACAR,MAAM,GAAG,WAAW;;MAGtB,IAAI8D,QAAQ,GAAGlG,OAAO,CAACyC,WAAW,EAAEyD,QAAQ;MAC5C,IAAItD,SAAS,KAAK7D,WAAA,CAAAuJ,aAAa,CAACG,YAAY,IAAIvC,QAAQ,KAAK,EAAE,EAAE;QAC/DA,QAAQ,GAAG7D,SAAS;;MAEtB,OAAOvD,mBAAA,CAAA+D,gBAAgB,CAACC,KAAK,CAAC9C,OAAO,CAACyC,WAAW,EAAE;QACjDG,SAAS;QACTR,MAAM;QACN8D;OACD,CAAC;IACJ;GACD;EACDuG,uBAAuB,EAAE;IACvBd,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAE7L,OAAO;MAAEoG;IAAM,CAAE;MAC3B;MACA;MACA;MACA,IAAI6C,mBAAmB,GAAG3D,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MAE7C,KAAK,MAAMmH,WAAW,IAAItG,MAAM,EAAE;QAChC,IAAI,OAAOsG,WAAW,KAAK,QAAQ,EAAE;UACnC,KAAK,MAAM,CAAC1K,GAAG,EAAEwB,KAAK,CAAC,IAAIM,iBAAiB,CAAC4I,WAAW,CAAC,EAAE;YACzD,IAAI;cACFzD,mBAAmB,CAACjH,GAAG,CAAC,GAAGuB,UAAU,CAACvB,GAAG,EAAEwB,KAAK,CAAC;aAClD,CAAC,MAAM;cACNyF,mBAAmB,CAACjH,GAAG,CAAC,GAAGwB,KAAK;;;SAGrC,MAAM;UACL,IAAI,CAAC,IAAA/D,OAAA,CAAAsM,QAAQ,EAACW,WAAW,CAAC,EAAE;YAC1B,MAAM,IAAIvN,OAAA,CAAAsC,eAAe,CAAC,2CAA2C,CAAC;;UAExEwH,mBAAmB,GAAG;YAAE,GAAGyD;UAAW,CAAE;;;MAG5C,OAAO5N,mBAAA,CAAA+D,gBAAgB,CAACC,KAAK,CAAC9C,OAAO,CAACyC,WAAW,EAAE;QACjDwG;OACD,CAAC;IACJ;GACD;EACD0D,UAAU,EAAE;IACVhB,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAE7L,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACpC,MAAMpB,MAAM,GAAG0J,MAAM,CAACtI,KAAK,CAAC;MAC5B,OAAO1E,mBAAA,CAAA+D,gBAAgB,CAACC,KAAK,CAAC9C,OAAO,CAACyC,WAAW,EAAE;QAAEL;MAAM,CAAE,CAAC;IAChE;GACD;EACD8G,cAAc,EAAE;IACd0C,IAAI,EAAE;GACP;EACDgB,UAAU,EAAE;IACVhB,IAAI,EAAE;GACP;EACDiB,SAAS,EAAE;IACTlB,MAAM,EAAE,WAAW;IACnBE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC0G,OAAO;IAAC,CAAE;MAC7B,MAAMC,mBAAmB,GACvB,OAAOD,OAAO,KAAK,QAAQ,GAAI;QAAEA;MAAO,CAAgB,GAAIA,OAAqB;MACnF,MAAME,iBAAiB,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACD,OAAO;MAC5E,IAAI,CAACE,iBAAiB,EAAE;QACtB,MAAM,IAAI7N,OAAA,CAAAsC,eAAe,CACvB,qFAAqF6D,MAAM,CAACc,MAAM,CAChGhH,cAAA,CAAA6N,gBAAgB,CACjB,CAACrL,IAAI,CAAC,MAAM,CAAC,IAAI,CACnB;;MAEH,IAAI,CAAC0D,MAAM,CAACc,MAAM,CAAChH,cAAA,CAAA6N,gBAAgB,CAAC,CAAClL,IAAI,CAACuC,CAAC,IAAIA,CAAC,KAAK0I,iBAAiB,CAAC,EAAE;QACvE,MAAM,IAAI7N,OAAA,CAAAsC,eAAe,CACvB,8BAA8BuL,iBAAiB,sCAAsC1H,MAAM,CAACc,MAAM,CAChGhH,cAAA,CAAA6N,gBAAgB,CACjB,CAACrL,IAAI,CAAC,MAAM,CAAC,IAAI,CACnB;;MAEH,OAAOmL,mBAAmB;IAC5B;GACD;EACDG,SAAS,EAAE;IACTtB,IAAI,EAAE;GACP;EACDuB,WAAW,EAAE;IACXjI,OAAO,EAAE,MAAM;IACfyG,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEzF;IAAM,CAAE;MAClB,MAAMgH,eAAe,GAAG,IAAIrG,GAAG,EAAE;MACjC,KAAK,MAAMsG,OAAO,IAAIjH,MAAuC,EAAE;QAC7D,MAAMkH,YAAY,GAAG,OAAOD,OAAO,KAAK,QAAQ,GAAGA,OAAO,CAAClN,KAAK,CAAC,GAAG,CAAC,GAAGkN,OAAO;QAC/E,IAAI,CAAC5F,KAAK,CAAC8F,OAAO,CAACD,YAAY,CAAC,EAAE;UAChC,MAAM,IAAInO,OAAA,CAAAqH,yBAAyB,CACjC,mEAAmE,CACpE;;QAEH,KAAK,MAAMgH,CAAC,IAAIF,YAAY,EAAE;UAC5B,IAAIhI,MAAM,CAACxD,IAAI,CAAC7C,aAAA,CAAAwO,UAAU,CAAC,CAACxL,QAAQ,CAAC6J,MAAM,CAAC0B,CAAC,CAAC,CAAC,EAAE;YAC/CJ,eAAe,CAACM,GAAG,CAAC5B,MAAM,CAAC0B,CAAC,CAAC,CAAC;WAC/B,MAAM;YACL,MAAM,IAAIrO,OAAA,CAAAqH,yBAAyB,CACjC,GAAGgH,CAAC,0DAA0DlI,MAAM,CAACxD,IAAI,CACvE7C,aAAA,CAAAwO,UAAU,CACX,GAAG,CACL;;;;MAIP,OAAO,CAAC,GAAGL,eAAe,CAAC;IAC7B;GACD;EACDO,gBAAgB,EAAE;IAChBzI,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACD/F,MAAM,EAAE;IACN+F,IAAI,EAAE;GACP;EACDrC,gBAAgB,EAAE;IAChBrE,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACDgC,UAAU,EAAE;IACV1I,OAAO,EAAE,EAAE;IACX0G,IAAI,EAAE;GACP;EACDiC,oBAAoB,EAAE;IAAEjC,IAAI,EAAE,SAAS;IAAE1G,OAAO,EAAE;EAAI,CAAE;EACxD4I,MAAM,EAAE;IACNjC,SAASA,CAAC;MAAEhL,IAAI;MAAEuF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC,MAAMwI,cAAc,GAAGvI,iBAAiB,CAAC5C,IAAI,EAAE2C,KAAK,CAAC;MACrD,IAAIwI,cAAc,KAAK,CAAC,IAAIA,cAAc,KAAK,CAAC,EAAE;QAChD,OAAOA,cAAc;;MAEvB,MAAM,IAAI7M,OAAA,CAAAsC,eAAe,CAAC,sCAAsCuK,cAAc,GAAG,CAAC;IACpF;GACD;EACD+B,WAAW,EAAE;IACXnC,IAAI,EAAE;GACP;EACDoC,mBAAmB,EAAE;IACnB9I,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACDqC,KAAK,EAAE;IACL/F,UAAU,EAAE,4BAA4B;IACxCyD,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEhL,IAAI;MAAEb,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAM0K,EAAE,GAAGxO,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGrO,OAAO,CAACqO,YAAY;UACvBJ,KAAK,EAAE1K,UAAU,CAAC1C,IAAI,EAAE2C,KAAK;;OAEhC,CAAC;MACF,IAAI,CAAC0K,EAAE,EAAE,MAAM,IAAI/O,OAAA,CAAAsC,eAAe,CAAC,4CAA4C+B,KAAK,EAAE,CAAC;MACvF,OAAO0K,EAAE;IACX;GACmB;EACrBI,oBAAoB,EAAE;IACpBpJ,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACD2C,eAAe,EAAE;IACf3C,IAAI,EAAE;GACP;EACD4C,CAAC,EAAE;IACDtG,UAAU,EAAE,4BAA4B;IACxCyD,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEhL,IAAI;MAAEb,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAM0K,EAAE,GAAGxO,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGrO,OAAO,CAACqO,YAAY;UACvBI,OAAO,EAAElL,UAAU,CAAC1C,IAAI,EAAE2C,KAAK;;OAElC,CAAC;MACF,IAAI,CAAC0K,EAAE,EAAE,MAAM,IAAI/O,OAAA,CAAAsC,eAAe,CAAC,8CAA8C+B,KAAK,EAAE,CAAC;MACzF,OAAO0K,EAAE;IACX;GACmB;EACrBO,OAAO,EAAE;IACP9C,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEhL,IAAI;MAAEb,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAM0K,EAAE,GAAGxO,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGrO,OAAO,CAACqO,YAAY;UACvBI,OAAO,EAAElL,UAAU,CAAC1C,IAAI,EAAE2C,KAAK;;OAElC,CAAC;MACF,IAAI,CAAC0K,EAAE,EAAE,MAAM,IAAI/O,OAAA,CAAAsC,eAAe,CAAC,8CAA8C+B,KAAK,EAAE,CAAC;MACzF,OAAO0K,EAAE;IACX;GACD;EACD3L,YAAY,EAAE;IACZ2C,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACD8C,gBAAgB,EAAE;IAChBxJ,OAAO,EAAE,EAAE;IACX0G,IAAI,EAAE;GACP;EACD+C,aAAa,EAAE;IACbzJ,OAAO,EAAE,CAAC;IACV2G,SAASA,CAAC;MAAEhL,IAAI;MAAEuF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC,MAAMmL,aAAa,GAAG/K,kBAAkB,CAAC/C,IAAI,EAAE2C,KAAK,CAAC;MACrD,IAAImL,aAAa,KAAK,CAAC,EAAE;QACvB,MAAM,IAAIxP,OAAA,CAAAqH,yBAAyB,CAAC,wCAAwC,CAAC;;MAE/E,OAAOmI,aAAa;IACtB;GACD;EACDC,aAAa,EAAE;IACb1J,OAAO,EAAE,CAAC;IACV0G,IAAI,EAAE;GACP;EACDiD,WAAW,EAAE;IACX3J,OAAO,EAAE,GAAG;IACZ0G,IAAI,EAAE;GACP;EACDkD,mBAAmB,EAAE;IACnBnD,MAAM,EAAE,gBAAgB;IACxBE,SAASA,CAAC;MAAEhL,IAAI;MAAEb,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMsL,mBAAmB,GAAGlL,kBAAkB,CAAC/C,IAAI,EAAE2C,KAAK,CAAC;MAC3D,IAAIxD,OAAO,CAAC+O,cAAc,EAAE;QAC1B,OAAOxP,iBAAA,CAAAyP,cAAc,CAACZ,WAAW,CAAC;UAChCW,cAAc,EAAE;YAAE,GAAG/O,OAAO,CAAC+O,cAAc;YAAED;UAAmB;SACjE,CAAC;OACH,MAAM;QACL,OAAO,IAAIvP,iBAAA,CAAAyP,cAAc,CAAC,WAAW,EAAE3M,SAAS,EAAE;UAAEyM;QAAmB,CAAE,CAAC;;IAE9E;GACD;EACDG,qBAAqB,EAAE;IACrBrD,IAAI,EAAE;GACP;EACDsD,WAAW,EAAE;IACXhK,OAAO,EAAE,CAAC;IACV0G,IAAI,EAAE;GACP;EACDuD,uBAAuB,EAAE;IACvBjK,OAAO,EAAE,GAAG;IACZ0G,IAAI,EAAE;GACP;EACDwD,eAAe,EAAE;IACflK,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACD/K,IAAI,EAAE;IACJ8K,MAAM,EAAE,YAAY;IACpBE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,OAAO;QAAE,GAAGA,OAAO,CAAC4N,UAAU;QAAE/M,IAAI,EAAEiL,MAAM,CAACtI,KAAK;MAAC,CAAE;IACvD;GACmB;EACrB6L,OAAO,EAAE;IACPnK,OAAO,EAAE,IAAI;IACb0G,IAAI,EAAE;GACP;EACD0D,SAAS,EAAE;IACTpK,OAAO,EAAEzF,OAAA,CAAA8P,kBAAkB;IAC3B1D,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,IAAI,IAAA/D,OAAA,CAAAsM,QAAQ,EAACvI,KAAK,EAAE,CAAC,UAAU,CAAU,CAAC,IAAI,OAAOA,KAAK,CAACgM,QAAQ,KAAK,UAAU,EAAE;QAClF,OAAOhM,KAAkB;;MAE3B,MAAM,IAAIrE,OAAA,CAAAsC,eAAe,CACvB,oEAAoE+B,KAAK,EAAE,CAC5E;IACH;GACD;EACDiM,cAAc,EAAE;IACd7D,IAAI,EAAE;GACP;EACD7G,YAAY,EAAE;IACZ6G,IAAI,EAAE;GACP;EACD5G,aAAa,EAAE;IACb4G,IAAI,EAAE;GACP;EACD9G,WAAW,EAAE;IACX8G,IAAI,EAAE;GACP;EACDhC,SAAS,EAAE;IACTgC,IAAI,EAAE;GACP;EACD7B,aAAa,EAAE;IACb6B,IAAI,EAAE;GACP;EACD/B,SAAS,EAAE;IACT+B,IAAI,EAAE;GACP;EACD9B,aAAa,EAAE;IACb8B,IAAI,EAAE;GACP;EACDW,GAAG,EAAE;IACHrH,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACD8D,WAAW,EAAE;IACX7D,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,IAAIwD,KAAK,YAAYlE,cAAA,CAAAqQ,WAAW,IAAI,IAAAlQ,OAAA,CAAAsM,QAAQ,EAACvI,KAAK,EAAE,CAAC,OAAO,CAAU,CAAC,EAAE;QACvE,OAAOlE,cAAA,CAAAqQ,WAAW,CAACvB,WAAW,CAAC;UAAE,GAAGpO,OAAO,CAAC0P,WAAW;UAAE,GAAGlM;QAAK,CAAS,CAAC;;MAE7E,MAAM,IAAIrE,OAAA,CAAAsC,eAAe,CAAC,sCAAsCmO,IAAI,CAACC,SAAS,CAACrM,KAAK,CAAC,EAAE,CAAC;IAC1F;GACD;EACDsM,gBAAgB,EAAE;IAChBnE,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC2J,KAAK,CAAC;MAAE/P;IAAO,CAAE;MACpC,OAAOV,cAAA,CAAAqQ,WAAW,CAACvB,WAAW,CAAC;QAC7B,GAAGpO,OAAO,CAAC0P,WAAW;QACtBK,KAAK,EAAEA;OACR,CAAC;IACJ;GACD;EACDhB,cAAc,EAAE;IACd7J,OAAO,EAAE3F,iBAAA,CAAAyP,cAAc,CAACgB,OAAO;IAC/BnE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,IAAIwD,KAAK,YAAYjE,iBAAA,CAAAyP,cAAc,EAAE;QACnC,OAAOzP,iBAAA,CAAAyP,cAAc,CAACZ,WAAW,CAAC;UAChCW,cAAc,EAAE;YAAE,GAAG/O,OAAO,CAAC+O,cAAc;YAAE,GAAGvL;UAAK,CAAE;UACvD,GAAGA;SACG,CAAC;;MAEX,IAAI,IAAA/D,OAAA,CAAAsM,QAAQ,EAACvI,KAAK,EAAE,CAAC,MAAM,CAAU,CAAC,EAAE;QACtC,MAAMyM,EAAE,GAAG1Q,iBAAA,CAAAyP,cAAc,CAACZ,WAAW,CAAC;UACpCW,cAAc,EAAE;YAAE,GAAG/O,OAAO,CAAC+O,cAAc;YAAE,GAAGvL;UAAK,CAAE;UACvD,GAAGA;SACG,CAAC;QACT,IAAIyM,EAAE,EAAE,OAAOA,EAAE,CAAC,KACb,MAAM,IAAI9Q,OAAA,CAAAsC,eAAe,CAAC,oCAAoCmO,IAAI,CAACC,SAAS,CAACrM,KAAK,CAAC,EAAE,CAAC;;MAE7F,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM0M,MAAM,GAAG;UACbC,KAAK,EAAEnQ,OAAO,CAAC+O,cAAc,EAAEoB,KAAK;UACpCrB,mBAAmB,EAAE9O,OAAO,CAAC+O,cAAc,EAAED;SAC9C;QACD,OAAO,IAAIvP,iBAAA,CAAAyP,cAAc,CACvBxL,KAA2B,EAC3BxD,OAAO,CAAC+O,cAAc,EAAEqB,IAAI,EAC5BF,MAAM,CACP;;MAEH,MAAM,IAAI/Q,OAAA,CAAAsC,eAAe,CAAC,iCAAiC+B,KAAK,EAAE,CAAC;IACrE;GACD;EACD6M,kBAAkB,EAAE;IAClB1E,MAAM,EAAE,gBAAgB;IACxBE,SAASA,CAAC;MACRzF,MAAM;MACNpG;IAAO,CAIR;MACC,MAAMoQ,IAAI,GAA2C3I,KAAK,CAAC8F,OAAO,CAACnH,MAAM,CAAC,CAAC,CAAC,CAAC,GACzEA,MAAM,CAAC,CAAC,CAAC,GACRA,MAAwB;MAC7B,MAAMiK,kBAAkB,GAAG,EAAE;MAC7B,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;QACtB,MAAMG,iBAAiB,GAAWjL,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACrD,IAAI,OAAO+K,GAAG,KAAK,QAAQ,EAAE;UAC3B,KAAK,MAAM,CAACjM,CAAC,EAAEC,CAAC,CAAC,IAAIR,iBAAiB,CAACwM,GAAG,CAAC,EAAE;YAC3CC,iBAAiB,CAAClM,CAAC,CAAC,GAAGC,CAAC;;;QAG5B,IAAI,IAAA7E,OAAA,CAAAsM,QAAQ,EAACuE,GAAG,CAAC,EAAE;UACjB,KAAK,MAAM,CAACjM,CAAC,EAAEC,CAAC,CAAC,IAAIgB,MAAM,CAAClB,OAAO,CAACkM,GAAG,CAAC,EAAE;YACxCC,iBAAiB,CAAClM,CAAC,CAAC,GAAGC,CAAC;;;QAG5B+L,kBAAkB,CAACpJ,IAAI,CAACsJ,iBAAiB,CAAC;;MAE5C,OAAOhR,iBAAA,CAAAyP,cAAc,CAACZ,WAAW,CAAC;QAChCW,cAAc,EAAE/O,OAAO,CAAC+O,cAAc;QACtCsB;OACD,CAAC;IACJ;GACD;EACD/N,UAAU,EAAE;IACVsJ,IAAI,EAAE;GACP;EACD4E,UAAU,EAAE;IACVtL,OAAO,EAAE,IAAI;IACb0G,IAAI,EAAE;GACP;EACD6E,WAAW,EAAE;IACXvL,OAAO,EAAE,IAAI;IACb0G,IAAI,EAAE;GACP;EACD8E,kBAAkB,EAAE;IAClB9E,IAAI,EAAE;GACP;EACD+E,oBAAoB,EAAE;IACpBzL,OAAO,EAAE,MAAM;IACf2G,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,IAAI,CAAC8B,MAAM,CAACc,MAAM,CAAC5G,SAAA,CAAAoR,oBAAoB,CAAC,CAAC3O,QAAQ,CAACuB,KAAY,CAAC,EAAE;QAC/D,MAAM,IAAIrE,OAAA,CAAAsC,eAAe,CACvB,iEAAiE,CAClE;;MAEH,OAAO+B,KAAK;IACd;GACD;EACDqN,wBAAwB,EAAE;IACxB3L,OAAO,EAAE,KAAK;IACd0G,IAAI,EAAE;GACP;EACDkF,UAAU,EAAE;IACVlF,IAAI,EAAE;GACP;EACDmF,eAAe,EAAE;IACf7L,OAAO,EAAE,CAAC;IACV0G,IAAI,EAAE;GACP;EACD5I,WAAW,EAAE;IACX4I,IAAI,EAAE,MAAM;IACZ1G,OAAO,EAAE;GACV;EACDtE,cAAc,EAAE;IACdgL,IAAI,EAAE,QAAQ;IACd1G,OAAO,EAAE;GACV;EACD8L,GAAG,EAAE;IACHrF,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE;GACP;EACDqF,SAAS,EAAE;IACTrF,IAAI,EAAE;GACP;EACDlC,GAAG,EAAE;IACHkC,IAAI,EAAE;GACP;EACDsF,2BAA2B,EAAE;IAC3BvF,MAAM,EAAE,oBAAoB;IAC5BE,SAASA,CAAC;MAAEhL,IAAI;MAAEuF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC;MACA,OAAO,CAACD,UAAU,CAAC1C,IAAI,EAAE2C,KAAK,CAAC;IACjC;GACD;EACD2N,wBAAwB,EAAE;IACxBxF,MAAM,EAAE,qBAAqB;IAC7BE,SAASA,CAAC;MAAEhL,IAAI;MAAEuF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC;MACA,OAAOD,UAAU,CAAC1C,IAAI,EAAE2C,KAAK,CAAC,GAAG,MAAMnB,SAAS,GAAGA,SAAS;IAC9D;GACD;EACD+O,SAAS,EAAE;IACTxF,IAAI,EAAE;GACP;EACDyF,UAAU,EAAE;IACVzF,IAAI,EAAE;GACP;EACD0F,qBAAqB,EAAE;IACrB1F,IAAI,EAAE;GACP;EACD2F,6BAA6B,EAAE;IAC7B5F,MAAM,EAAE,YAAY;IACpBC,IAAI,EAAE;GACP;EACD4F,WAAW,EAAE;IACX3F,SAASA,CAAC;MAAEhL,IAAI;MAAEb,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMgO,WAAW,GAAGjO,UAAU,CAAC1C,IAAI,EAAE2C,KAAK,CAAC;MAC3C,IAAIgO,WAAW,EAAE;QACfxR,OAAO,CAACyR,mBAAmB,GAAG,MAAMpP,SAAS;QAC7CrC,OAAO,CAAC0R,kBAAkB,GAAG,KAAK;OACnC,MAAM;QACL1R,OAAO,CAACyR,mBAAmB,GAAGzR,OAAO,CAACmR,wBAAwB,GAC1D,MAAM9O,SAAS,GACfA,SAAS;QACbrC,OAAO,CAAC0R,kBAAkB,GAAG1R,OAAO,CAACkR,2BAA2B,GAAG,KAAK,GAAG,IAAI;;MAEjF,OAAOM,WAAW;IACpB;GACD;EACDG,CAAC,EAAE;IACDhG,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,OAAON,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;QAAEC,YAAY,EAAE;UAAE,GAAGrO,OAAO,CAACqO,YAAY;UAAEsD,CAAC,EAAEnO;QAAU;MAAE,CAAE,CAAC;IAC/F;GACD;EACDoO,kBAAkB,EAAE;IAClB1M,OAAO,EAAE,CAAC;IACV0G,IAAI,EAAE;GACP;EACDyC,YAAY,EAAE;IACZ1C,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,IAAI,IAAAP,OAAA,CAAAsM,QAAQ,EAACvI,KAAK,CAAC,IAAIA,KAAK,YAAY9D,eAAA,CAAAyO,YAAY,EAAE;QACpD,OAAOzO,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;UAC9BC,YAAY,EAAE;YACZ,GAAGrO,OAAO,CAACqO,YAAY;YACvB,GAAG7K;;SAEN,CAAC;OACH,MAAM,IAAIA,KAAK,KAAK,UAAU,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC5D,OAAO9D,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;UAC9BC,YAAY,EAAE;YACZ,GAAGrO,OAAO,CAACqO,YAAY;YACvBsD,CAAC,EAAEnO;;SAEN,CAAC;;MAGJ,MAAM,IAAIrE,OAAA,CAAAsC,eAAe,CAAC,sCAAsCmO,IAAI,CAACC,SAAS,CAACrM,KAAK,CAAC,EAAE,CAAC;IAC1F;GACD;EACDqO,QAAQ,EAAE;IACR3J,UAAU,EAAE,+BAA+B;IAC3CyD,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,MAAMkO,EAAE,GAAGxO,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGrO,OAAO,CAACqO,YAAY;UACvBwD,QAAQ,EAAEjO,kBAAkB,CAAC,UAAU,EAAEJ,KAAK;;OAEjD,CAAC;MACF,IAAI0K,EAAE,EAAE,OAAOA,EAAE;MACjB,MAAM,IAAI/O,OAAA,CAAAsC,eAAe,CAAC,wCAAwC,CAAC;IACrE;GACmB;EACrBqQ,UAAU,EAAE;IACVnG,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,MAAMkO,EAAE,GAAGxO,eAAA,CAAAyO,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGrO,OAAO,CAACqO,YAAY;UACvByD,UAAU,EAAElO,kBAAkB,CAAC,YAAY,EAAEJ,KAAK;;OAErD,CAAC;MACF,IAAI0K,EAAE,EAAE,OAAOA,EAAE;MACjB,MAAM,IAAI/O,OAAA,CAAAsC,eAAe,CAAC,wCAAwC,CAAC;IACrE;GACD;EACDsQ,oBAAoB,EAAE;IACpB7M,OAAO,EAAE,CAAC;IACV0G,IAAI,EAAE;GACP;EACD;EACAoG,cAAc,EAAE;IAAEpG,IAAI,EAAE;EAAK,CAAE;EAC/BqG,SAAS,EAAE;IAAErG,IAAI,EAAE;EAAK,CAAE;EAC1B;EACAsG,SAAS,EAAE;IAAEtG,IAAI,EAAE;EAAK,CAAE;EAC1BuG,WAAW,EAAE;IAAEvG,IAAI,EAAE;EAAK,CAAE;EAC5BwG,aAAa,EAAE;IAAExG,IAAI,EAAE;EAAK,CAAE;EAC9ByG,WAAW,EAAE;IAAEzG,IAAI,EAAE;EAAK,CAAE;EAC5B0G,WAAW,EAAE;IAAE1G,IAAI,EAAE;EAAK,CAAE;EAC5B8F,kBAAkB,EAAE;IAAE9F,IAAI,EAAE;EAAK,CAAE;EACnC6F,mBAAmB,EAAE;IAAE7F,IAAI,EAAE;EAAK,CAAE;EACpC2G,aAAa,EAAE;IAAE3G,IAAI,EAAE;EAAK,CAAE;EAC9B4G,WAAW,EAAE;IAAE5G,IAAI,EAAE;EAAK,CAAE;EAC5B6G,OAAO,EAAE;IAAE7G,IAAI,EAAE;EAAK,CAAE;EACxB8G,WAAW,EAAE;IAAE9G,IAAI,EAAE;EAAK,CAAE;EAC5B+G,YAAY,EAAE;IAAE/G,IAAI,EAAE;EAAK,CAAE;EAC7BgH,SAAS,EAAE;IAAEhH,IAAI,EAAE;EAAK,CAAE;EAC1BiH,KAAK,EAAE;IAAEjH,IAAI,EAAE;EAAK,CAAE;EACtBkH,MAAM,EAAE;IAAElH,IAAI,EAAE;EAAK,CAAE;EACvBmH,EAAE,EAAE;IAAEnH,IAAI,EAAE;EAAK,CAAE;EACnBoH,IAAI,EAAE;IAAEpH,IAAI,EAAE;EAAK,CAAE;EACrBqH,OAAO,EAAE;IAAErH,IAAI,EAAE;EAAK,CAAE;EACxBsH,GAAG,EAAE;IAAEtH,IAAI,EAAE;EAAK,CAAE;EACpBuH,SAAS,EAAE;IAAEvH,IAAI,EAAE;EAAK,CAAE;EAC1B5J,GAAG,EAAE;IAAE4J,IAAI,EAAE;EAAK,CAAE;EACpBwH,UAAU,EAAE;IAAExH,IAAI,EAAE;EAAK,CAAE;EAC3ByH,GAAG,EAAE;IAAEzH,IAAI,EAAE;EAAK,CAAE;EACpB0H,cAAc,EAAE;IAAE1H,IAAI,EAAE;EAAK,CAAE;EAC/B2H,KAAK,EAAE;IAAE3H,IAAI,EAAE;EAAK,CAAE;EACtB;EACA4H,eAAe,EAAE;IACf5H,IAAI,EAAE,SAAS;IACf1D,UAAU,EACR;GACiB;EACrBuL,kBAAkB,EAAE;IAClB7H,IAAI,EAAE,SAAS;IACf1D,UAAU,EACR;GACiB;EACrB;EACA;;;;EAIA8C,cAAc,EAAE;IACda,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,IACE,EACG,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACvB,QAAQ,CAACuB,KAAK,CAAC,IACjEA,KAAK,IACJ,OAAOA,KAAK,KAAK,QAAQ,IACzB,OAAO,IAAIA,KAAK,IAChB,OAAOA,KAAK,CAACkQ,KAAK,KAAK,UAAW,CACrC,EACD;QACA,MAAM,IAAIvU,OAAA,CAAAe,aAAa,CACrB,kFAAkF,CACnF;;MAEH,OAAOsD,KAAK;IACd;GACD;EACD;;;;EAIAyH,6BAA6B,EAAE;IAC7BY,SAASA,CAAC;MAAEzF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,EAAE;QACvC,MAAM,IAAIrE,OAAA,CAAAe,aAAa,CAAC,kEAAkE,CAAC;;MAE7F,KAAK,MAAM,CAACmE,CAAC,EAAEC,CAAC,CAAC,IAAIgB,MAAM,CAAClB,OAAO,CAACZ,KAAK,CAAC,EAAE;QAC1C,IAAI,OAAOc,CAAC,KAAK,QAAQ,IAAI,OAAOD,CAAC,KAAK,QAAQ,EAAE;UAClD,MAAM,IAAIlF,OAAA,CAAAe,aAAa,CACrB,uGAAuG,CACxG;;QAEH,IAAI,CAACoF,MAAM,CAACc,MAAM,CAAC/G,cAAA,CAAAsU,sBAAsB,CAAC,CAAC5R,IAAI,CAAC6R,GAAG,IAAIA,GAAG,KAAKvP,CAAC,CAAC,IAAIA,CAAC,KAAK,SAAS,EAAE;UACpF,MAAM,IAAIlF,OAAA,CAAAe,aAAa,CACrB,+EAA+EmE,CAAC,EAAE,CACnF;;QAEH,IAAI,CAACiB,MAAM,CAACc,MAAM,CAAC/G,cAAA,CAAAwU,aAAa,CAAC,CAAC9R,IAAI,CAAC6R,GAAG,IAAIA,GAAG,KAAKtP,CAAC,CAAC,EAAE;UACxD,MAAM,IAAInF,OAAA,CAAAe,aAAa,CACrB,2DAA2DoE,CAAC,mBAAmBD,CAAC,EAAE,CACnF;;;MAGL,OAAOb,KAAK;IACd;GACD;EACD;;;;EAIA0H,2BAA2B,EAAE;IAAEU,IAAI,EAAE;EAAM;CACU;AAE1C3I,OAAA,CAAA+E,eAAe,GAAG,IAAI/D,kBAAkB,CACnDqB,MAAM,CAAClB,OAAO,CAACnB,OAAA,CAAA0E,OAAO,CAAC,CACpBjB,MAAM,CAAC,CAAC,GAAGqB,UAAU,CAAC,KAAKA,UAAU,CAAC7C,OAAO,IAAI,IAAI,CAAC,CACtDlE,GAAG,CAAC,CAAC,CAACqD,CAAC,EAAEyP,CAAC,CAAC,KAAK,CAACzP,CAAC,EAAEyP,CAAC,CAAC5O,OAAO,CAAC,CAAC,CACnC;AAED;;;;AAIajC,OAAA,CAAAyC,aAAa,GAAG,IAAIqB,GAAG,CAAC,CACnCmD,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC,EACrCD,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC,EACrCD,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}