{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst common_functions_1 = require(\"./common_functions\");\nconst operation_1 = require(\"./operation\");\nconst VALID_INDEX_OPTIONS = new Set(['background', 'unique', 'name', 'partialFilterExpression', 'sparse', 'hidden', 'expireAfterSeconds', 'storageEngine', 'collation', 'version',\n// text indexes\n'weights', 'default_language', 'language_override', 'textIndexVersion',\n// 2d-sphere indexes\n'2dsphereIndexVersion',\n// 2d indexes\n'bits', 'min', 'max',\n// geoHaystack Indexes\n'bucketSize',\n// wildcard indexes\n'wildcardProjection']);\nfunction isIndexDirection(x) {\n  return typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack';\n}\nfunction isSingleIndexTuple(t) {\n  return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n  const key = new Map();\n  const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n  // Iterate through array and handle different types\n  for (const spec of indexSpecs) {\n    if (typeof spec === 'string') {\n      key.set(spec, 1);\n    } else if (Array.isArray(spec)) {\n      key.set(spec[0], spec[1] ?? 1);\n    } else if (spec instanceof Map) {\n      for (const [property, value] of spec) {\n        key.set(property, value);\n      }\n    } else if ((0, utils_1.isObject)(spec)) {\n      for (const [property, value] of Object.entries(spec)) {\n        key.set(property, value);\n      }\n    }\n  }\n  return {\n    ...options,\n    key\n  };\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n  get commandName() {\n    return 'listIndexes';\n  }\n  async execute(_server, session) {\n    const coll = this.collection;\n    const options = this.options;\n    return (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      full: true,\n      ...options,\n      readPreference: this.readPreference,\n      session\n    });\n  }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n  constructor(parent, collectionName, indexes, options) {\n    super(parent, options);\n    this.options = options ?? {};\n    this.collectionName = collectionName;\n    this.indexes = indexes.map(userIndex => {\n      // Ensure the key is a Map to preserve index key ordering\n      const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n      const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n      const validIndexOptions = Object.fromEntries(Object.entries({\n        ...userIndex\n      }).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName)));\n      return {\n        ...validIndexOptions,\n        name,\n        key\n      };\n    });\n  }\n  get commandName() {\n    return 'createIndexes';\n  }\n  async execute(server, session) {\n    const options = this.options;\n    const indexes = this.indexes;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const cmd = {\n      createIndexes: this.collectionName,\n      indexes\n    };\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n    await super.executeCommand(server, session, cmd);\n    const indexNames = indexes.map(index => index.name || '');\n    return indexNames;\n  }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n  constructor(parent, collectionName, indexSpec, options) {\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n  async execute(server, session) {\n    const indexNames = await super.execute(server, session);\n    return indexNames[0];\n  }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n  constructor(db, collectionName, indexSpec, options) {\n    super(db, collectionName, indexSpec, options);\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n  get commandName() {\n    return 'listIndexes';\n  }\n  async execute(server, session) {\n    const indexName = this.indexes[0].name;\n    const indexes = await this.db.collection(this.collectionName).listIndexes({\n      session\n    }).toArray().catch(error => {\n      if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) return [];\n      throw error;\n    });\n    if (indexName && indexes.some(index => index.name === indexName)) return indexName;\n    return super.execute(server, session);\n  }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n  constructor(collection, indexName, options) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n  get commandName() {\n    return 'dropIndexes';\n  }\n  async execute(server, session) {\n    const cmd = {\n      dropIndexes: this.collection.collectionName,\n      index: this.indexName\n    };\n    return super.executeCommand(server, session, cmd);\n  }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n  constructor(collection, options) {\n    super(collection, options);\n    this.options = {\n      ...options\n    };\n    delete this.options.writeConcern;\n    this.collectionNamespace = collection.s.namespace;\n  }\n  get commandName() {\n    return 'listIndexes';\n  }\n  async execute(server, session) {\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const cursor = this.options.batchSize ? {\n      batchSize: this.options.batchSize\n    } : {};\n    const command = {\n      listIndexes: this.collectionNamespace.collection,\n      cursor\n    };\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n    return super.executeCommand(server, session, command);\n  }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n  constructor(collection, indexes, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n  get commandName() {\n    return 'listIndexes';\n  }\n  async execute(server, session) {\n    const coll = this.collection;\n    const indexes = this.indexes;\n    const info = await (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    });\n    // Let's check for the index names\n    if (!Array.isArray(indexes)) return info[indexes] != null;\n    // All keys found return true\n    return indexes.every(indexName => info[indexName] != null);\n  }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n  constructor(db, name, options) {\n    super(options);\n    this.options = options ?? {};\n    this.db = db;\n    this.name = name;\n  }\n  get commandName() {\n    return 'listIndexes';\n  }\n  async execute(server, session) {\n    const db = this.db;\n    const name = this.name;\n    return (0, common_functions_1.indexInformation)(db, name, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    });\n  }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["error_1","require","read_preference_1","utils_1","command_1","common_functions_1","operation_1","VALID_INDEX_OPTIONS","Set","isIndexDirection","x","isSingleIndexTuple","t","Array","isArray","length","makeIndexSpec","indexSpec","options","key","Map","indexSpecs","spec","set","property","value","isObject","Object","entries","IndexesOperation","AbstractOperation","constructor","collection","commandName","execute","_server","session","coll","indexInformation","s","db","collectionName","full","readPreference","exports","CreateIndexesOperation","CommandOperation","parent","indexes","map","userIndex","name","from","flat","join","validIndexOptions","fromEntries","filter","optionName","has","server","serverWireVersion","maxWireVersion","cmd","createIndexes","commitQuorum","MongoCompatibilityError","collation","undefined","executeCommand","indexNames","index","CreateIndexOperation","EnsureIndexOperation","ReadPreference","primary","indexName","listIndexes","toArray","catch","error","MongoError","code","MONGODB_ERROR_CODES","NamespaceNotFound","some","DropIndexOperation","dropIndexes","ListIndexesOperation","writeConcern","collectionNamespace","namespace","cursor","batchSize","command","comment","IndexExistsOperation","info","every","IndexInformationOperation","defineAspects","Aspect","READ_OPERATION","RETRYABLE","CURSOR_CREATING","WRITE_OPERATION"],"sources":["/Users/jerrybenoit/Desktop/Moveout_Project/moveout/node_modules/mongodb/src/operations/indexes.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Db } from '../db';\nimport { MongoCompatibilityError, MONGODB_ERROR_CODES, MongoError } from '../error';\nimport { type OneOrMore } from '../mongo_types';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { isObject, maxWireVersion, type MongoDBNamespace } from '../utils';\nimport {\n  type CollationOptions,\n  CommandOperation,\n  type CommandOperationOptions,\n  type OperationParent\n} from './command';\nimport { indexInformation, type IndexInformationOptions } from './common_functions';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\nconst VALID_INDEX_OPTIONS = new Set([\n  'background',\n  'unique',\n  'name',\n  'partialFilterExpression',\n  'sparse',\n  'hidden',\n  'expireAfterSeconds',\n  'storageEngine',\n  'collation',\n  'version',\n\n  // text indexes\n  'weights',\n  'default_language',\n  'language_override',\n  'textIndexVersion',\n\n  // 2d-sphere indexes\n  '2dsphereIndexVersion',\n\n  // 2d indexes\n  'bits',\n  'min',\n  'max',\n\n  // geoHaystack Indexes\n  'bucketSize',\n\n  // wildcard indexes\n  'wildcardProjection'\n]);\n\n/** @public */\nexport type IndexDirection =\n  | -1\n  | 1\n  | '2d'\n  | '2dsphere'\n  | 'text'\n  | 'geoHaystack'\n  | 'hashed'\n  | number;\n\nfunction isIndexDirection(x: unknown): x is IndexDirection {\n  return (\n    typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack'\n  );\n}\n/** @public */\nexport type IndexSpecification = OneOrMore<\n  | string\n  | [string, IndexDirection]\n  | { [key: string]: IndexDirection }\n  | Map<string, IndexDirection>\n>;\n\n/** @public */\nexport interface IndexDescription\n  extends Pick<\n    CreateIndexesOptions,\n    | 'background'\n    | 'unique'\n    | 'partialFilterExpression'\n    | 'sparse'\n    | 'hidden'\n    | 'expireAfterSeconds'\n    | 'storageEngine'\n    | 'version'\n    | 'weights'\n    | 'default_language'\n    | 'language_override'\n    | 'textIndexVersion'\n    | '2dsphereIndexVersion'\n    | 'bits'\n    | 'min'\n    | 'max'\n    | 'bucketSize'\n    | 'wildcardProjection'\n  > {\n  collation?: CollationOptions;\n  name?: string;\n  key: { [key: string]: IndexDirection } | Map<string, IndexDirection>;\n}\n\n/** @public */\nexport interface CreateIndexesOptions extends Omit<CommandOperationOptions, 'writeConcern'> {\n  /** Creates the index in the background, yielding whenever possible. */\n  background?: boolean;\n  /** Creates an unique index. */\n  unique?: boolean;\n  /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */\n  name?: string;\n  /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */\n  partialFilterExpression?: Document;\n  /** Creates a sparse index. */\n  sparse?: boolean;\n  /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */\n  expireAfterSeconds?: number;\n  /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */\n  storageEngine?: Document;\n  /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes. */\n  commitQuorum?: number | string;\n  /** Specifies the index version number, either 0 or 1. */\n  version?: number;\n  // text indexes\n  weights?: Document;\n  default_language?: string;\n  language_override?: string;\n  textIndexVersion?: number;\n  // 2d-sphere indexes\n  '2dsphereIndexVersion'?: number;\n  // 2d indexes\n  bits?: number;\n  /** For geospatial indexes set the lower bound for the co-ordinates. */\n  min?: number;\n  /** For geospatial indexes set the high bound for the co-ordinates. */\n  max?: number;\n  // geoHaystack Indexes\n  bucketSize?: number;\n  // wildcard indexes\n  wildcardProjection?: Document;\n  /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */\n  hidden?: boolean;\n}\n\nfunction isSingleIndexTuple(t: unknown): t is [string, IndexDirection] {\n  return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\n\nfunction makeIndexSpec(\n  indexSpec: IndexSpecification,\n  options?: CreateIndexesOptions\n): IndexDescription {\n  const key: Map<string, IndexDirection> = new Map();\n\n  const indexSpecs =\n    !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n\n  // Iterate through array and handle different types\n  for (const spec of indexSpecs) {\n    if (typeof spec === 'string') {\n      key.set(spec, 1);\n    } else if (Array.isArray(spec)) {\n      key.set(spec[0], spec[1] ?? 1);\n    } else if (spec instanceof Map) {\n      for (const [property, value] of spec) {\n        key.set(property, value);\n      }\n    } else if (isObject(spec)) {\n      for (const [property, value] of Object.entries(spec)) {\n        key.set(property, value);\n      }\n    }\n  }\n\n  return { ...options, key };\n}\n\n/** @internal */\nexport class IndexesOperation extends AbstractOperation<Document[]> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: IndexInformationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  override get commandName() {\n    return 'listIndexes' as const;\n  }\n\n  override async execute(_server: Server, session: ClientSession | undefined): Promise<Document[]> {\n    const coll = this.collection;\n    const options = this.options;\n\n    return indexInformation(coll.s.db, coll.collectionName, {\n      full: true,\n      ...options,\n      readPreference: this.readPreference,\n      session\n    });\n  }\n}\n\n/** @internal */\nexport class CreateIndexesOperation<\n  T extends string | string[] = string[]\n> extends CommandOperation<T> {\n  override options: CreateIndexesOptions;\n  collectionName: string;\n  indexes: ReadonlyArray<Omit<IndexDescription, 'key'> & { key: Map<string, IndexDirection> }>;\n\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexes: IndexDescription[],\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, options);\n\n    this.options = options ?? {};\n    this.collectionName = collectionName;\n    this.indexes = indexes.map(userIndex => {\n      // Ensure the key is a Map to preserve index key ordering\n      const key =\n        userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n      const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n      const validIndexOptions = Object.fromEntries(\n        Object.entries({ ...userIndex }).filter(([optionName]) =>\n          VALID_INDEX_OPTIONS.has(optionName)\n        )\n      );\n      return {\n        ...validIndexOptions,\n        name,\n        key\n      };\n    });\n  }\n\n  override get commandName() {\n    return 'createIndexes';\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<T> {\n    const options = this.options;\n    const indexes = this.indexes;\n\n    const serverWireVersion = maxWireVersion(server);\n\n    const cmd: Document = { createIndexes: this.collectionName, indexes };\n\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        throw new MongoCompatibilityError(\n          'Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'\n        );\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n\n    await super.executeCommand(server, session, cmd);\n\n    const indexNames = indexes.map(index => index.name || '');\n    return indexNames as T;\n  }\n}\n\n/** @internal */\nexport class CreateIndexOperation extends CreateIndexesOperation<string> {\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<string> {\n    const indexNames = await super.execute(server, session);\n    return indexNames[0];\n  }\n}\n\n/** @internal */\nexport class EnsureIndexOperation extends CreateIndexOperation {\n  db: Db;\n\n  constructor(\n    db: Db,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    super(db, collectionName, indexSpec, options);\n\n    this.readPreference = ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n\n  override get commandName() {\n    return 'listIndexes';\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<string> {\n    const indexName = this.indexes[0].name;\n    const indexes = await this.db\n      .collection(this.collectionName)\n      .listIndexes({ session })\n      .toArray()\n      .catch(error => {\n        if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound)\n          return [];\n        throw error;\n      });\n    if (indexName && indexes.some(index => index.name === indexName)) return indexName;\n    return super.execute(server, session);\n  }\n}\n\n/** @public */\nexport type DropIndexesOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropIndexOperation extends CommandOperation<Document> {\n  override options: DropIndexesOptions;\n  collection: Collection;\n  indexName: string;\n\n  constructor(collection: Collection, indexName: string, options?: DropIndexesOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n\n  override get commandName() {\n    return 'dropIndexes' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n    return super.executeCommand(server, session, cmd);\n  }\n}\n\n/** @public */\nexport interface ListIndexesOptions extends Omit<CommandOperationOptions, 'writeConcern'> {\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n  batchSize?: number;\n}\n\n/** @internal */\nexport class ListIndexesOperation extends CommandOperation<Document> {\n  /**\n   * @remarks WriteConcern can still be present on the options because\n   * we inherit options from the client/db/collection.  The\n   * key must be present on the options in order to delete it.\n   * This allows typescript to delete the key but will\n   * not allow a writeConcern to be assigned as a property on options.\n   */\n  override options: ListIndexesOptions & { writeConcern?: never };\n  collectionNamespace: MongoDBNamespace;\n\n  constructor(collection: Collection, options?: ListIndexesOptions) {\n    super(collection, options);\n\n    this.options = { ...options };\n    delete this.options.writeConcern;\n    this.collectionNamespace = collection.s.namespace;\n  }\n\n  override get commandName() {\n    return 'listIndexes' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const serverWireVersion = maxWireVersion(server);\n\n    const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n\n    const command: Document = { listIndexes: this.collectionNamespace.collection, cursor };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    return super.executeCommand(server, session, command);\n  }\n}\n\n/** @internal */\nexport class IndexExistsOperation extends AbstractOperation<boolean> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n  indexes: string | string[];\n\n  constructor(\n    collection: Collection,\n    indexes: string | string[],\n    options: IndexInformationOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n\n  override get commandName() {\n    return 'listIndexes' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<boolean> {\n    const coll = this.collection;\n    const indexes = this.indexes;\n\n    const info = await indexInformation(coll.s.db, coll.collectionName, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    });\n    // Let's check for the index names\n    if (!Array.isArray(indexes)) return info[indexes] != null;\n    // All keys found return true\n    return indexes.every(indexName => info[indexName] != null);\n  }\n}\n\n/** @internal */\nexport class IndexInformationOperation extends AbstractOperation<Document> {\n  override options: IndexInformationOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options?: IndexInformationOptions) {\n    super(options);\n    this.options = options ?? {};\n    this.db = db;\n    this.name = name;\n  }\n\n  override get commandName() {\n    return 'listIndexes' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const db = this.db;\n    const name = this.name;\n\n    return indexInformation(db, name, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    });\n  }\n}\n\ndefineAspects(ListIndexesOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(CreateIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(EnsureIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":";;;;;;AAGA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,iBAAA,GAAAD,OAAA;AAGA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AAMA,MAAAI,kBAAA,GAAAJ,OAAA;AACA,MAAAK,WAAA,GAAAL,OAAA;AAEA,MAAMM,mBAAmB,GAAG,IAAIC,GAAG,CAAC,CAClC,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,yBAAyB,EACzB,QAAQ,EACR,QAAQ,EACR,oBAAoB,EACpB,eAAe,EACf,WAAW,EACX,SAAS;AAET;AACA,SAAS,EACT,kBAAkB,EAClB,mBAAmB,EACnB,kBAAkB;AAElB;AACA,sBAAsB;AAEtB;AACA,MAAM,EACN,KAAK,EACL,KAAK;AAEL;AACA,YAAY;AAEZ;AACA,oBAAoB,CACrB,CAAC;AAaF,SAASC,gBAAgBA,CAACC,CAAU;EAClC,OACE,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,MAAM,IAAIA,CAAC,KAAK,aAAa;AAElG;AA8EA,SAASC,kBAAkBA,CAACC,CAAU;EACpC,OAAOC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,IAAIA,CAAC,CAACG,MAAM,KAAK,CAAC,IAAIN,gBAAgB,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE;AAEA,SAASI,aAAaA,CACpBC,SAA6B,EAC7BC,OAA8B;EAE9B,MAAMC,GAAG,GAAgC,IAAIC,GAAG,EAAE;EAElD,MAAMC,UAAU,GACd,CAACR,KAAK,CAACC,OAAO,CAACG,SAAS,CAAC,IAAIN,kBAAkB,CAACM,SAAS,CAAC,GAAG,CAACA,SAAS,CAAC,GAAGA,SAAS;EAEtF;EACA,KAAK,MAAMK,IAAI,IAAID,UAAU,EAAE;IAC7B,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;MAC5BH,GAAG,CAACI,GAAG,CAACD,IAAI,EAAE,CAAC,CAAC;KACjB,MAAM,IAAIT,KAAK,CAACC,OAAO,CAACQ,IAAI,CAAC,EAAE;MAC9BH,GAAG,CAACI,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KAC/B,MAAM,IAAIA,IAAI,YAAYF,GAAG,EAAE;MAC9B,KAAK,MAAM,CAACI,QAAQ,EAAEC,KAAK,CAAC,IAAIH,IAAI,EAAE;QACpCH,GAAG,CAACI,GAAG,CAACC,QAAQ,EAAEC,KAAK,CAAC;;KAE3B,MAAM,IAAI,IAAAtB,OAAA,CAAAuB,QAAQ,EAACJ,IAAI,CAAC,EAAE;MACzB,KAAK,MAAM,CAACE,QAAQ,EAAEC,KAAK,CAAC,IAAIE,MAAM,CAACC,OAAO,CAACN,IAAI,CAAC,EAAE;QACpDH,GAAG,CAACI,GAAG,CAACC,QAAQ,EAAEC,KAAK,CAAC;;;;EAK9B,OAAO;IAAE,GAAGP,OAAO;IAAEC;EAAG,CAAE;AAC5B;AAEA;AACA,MAAaU,gBAAiB,SAAQvB,WAAA,CAAAwB,iBAA6B;EAIjEC,YAAYC,UAAsB,EAAEd,OAAgC;IAClE,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACc,UAAU,GAAGA,UAAU;EAC9B;EAEA,IAAaC,WAAWA,CAAA;IACtB,OAAO,aAAsB;EAC/B;EAES,MAAMC,OAAOA,CAACC,OAAe,EAAEC,OAAkC;IACxE,MAAMC,IAAI,GAAG,IAAI,CAACL,UAAU;IAC5B,MAAMd,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,OAAO,IAAAb,kBAAA,CAAAiC,gBAAgB,EAACD,IAAI,CAACE,CAAC,CAACC,EAAE,EAAEH,IAAI,CAACI,cAAc,EAAE;MACtDC,IAAI,EAAE,IAAI;MACV,GAAGxB,OAAO;MACVyB,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCP;KACD,CAAC;EACJ;;AAxBFQ,OAAA,CAAAf,gBAAA,GAAAA,gBAAA;AA2BA;AACA,MAAagB,sBAEX,SAAQzC,SAAA,CAAA0C,gBAAmB;EAK3Bf,YACEgB,MAAuB,EACvBN,cAAsB,EACtBO,OAA2B,EAC3B9B,OAA8B;IAE9B,KAAK,CAAC6B,MAAM,EAAE7B,OAAO,CAAC;IAEtB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACuB,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACO,OAAO,GAAGA,OAAO,CAACC,GAAG,CAACC,SAAS,IAAG;MACrC;MACA,MAAM/B,GAAG,GACP+B,SAAS,CAAC/B,GAAG,YAAYC,GAAG,GAAG8B,SAAS,CAAC/B,GAAG,GAAG,IAAIC,GAAG,CAACO,MAAM,CAACC,OAAO,CAACsB,SAAS,CAAC/B,GAAG,CAAC,CAAC;MACvF,MAAMgC,IAAI,GAAGD,SAAS,CAACC,IAAI,IAAI,IAAI,GAAGD,SAAS,CAACC,IAAI,GAAGtC,KAAK,CAACuC,IAAI,CAACjC,GAAG,CAAC,CAACkC,IAAI,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC;MACvF,MAAMC,iBAAiB,GAAG5B,MAAM,CAAC6B,WAAW,CAC1C7B,MAAM,CAACC,OAAO,CAAC;QAAE,GAAGsB;MAAS,CAAE,CAAC,CAACO,MAAM,CAAC,CAAC,CAACC,UAAU,CAAC,KACnDnD,mBAAmB,CAACoD,GAAG,CAACD,UAAU,CAAC,CACpC,CACF;MACD,OAAO;QACL,GAAGH,iBAAiB;QACpBJ,IAAI;QACJhC;OACD;IACH,CAAC,CAAC;EACJ;EAEA,IAAac,WAAWA,CAAA;IACtB,OAAO,eAAe;EACxB;EAES,MAAMC,OAAOA,CAAC0B,MAAc,EAAExB,OAAkC;IACvE,MAAMlB,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAM8B,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,MAAMa,iBAAiB,GAAG,IAAA1D,OAAA,CAAA2D,cAAc,EAACF,MAAM,CAAC;IAEhD,MAAMG,GAAG,GAAa;MAAEC,aAAa,EAAE,IAAI,CAACvB,cAAc;MAAEO;IAAO,CAAE;IAErE,IAAI9B,OAAO,CAAC+C,YAAY,IAAI,IAAI,EAAE;MAChC,IAAIJ,iBAAiB,GAAG,CAAC,EAAE;QACzB,MAAM,IAAI7D,OAAA,CAAAkE,uBAAuB,CAC/B,0EAA0E,CAC3E;;MAEHH,GAAG,CAACE,YAAY,GAAG/C,OAAO,CAAC+C,YAAY;;IAGzC;IACA,IAAI,CAAC/C,OAAO,CAACiD,SAAS,GAAGC,SAAS;IAElC,MAAM,KAAK,CAACC,cAAc,CAACT,MAAM,EAAExB,OAAO,EAAE2B,GAAG,CAAC;IAEhD,MAAMO,UAAU,GAAGtB,OAAO,CAACC,GAAG,CAACsB,KAAK,IAAIA,KAAK,CAACpB,IAAI,IAAI,EAAE,CAAC;IACzD,OAAOmB,UAAe;EACxB;;AA/DF1B,OAAA,CAAAC,sBAAA,GAAAA,sBAAA;AAkEA;AACA,MAAa2B,oBAAqB,SAAQ3B,sBAA8B;EACtEd,YACEgB,MAAuB,EACvBN,cAAsB,EACtBxB,SAA6B,EAC7BC,OAA8B;IAE9B,KAAK,CAAC6B,MAAM,EAAEN,cAAc,EAAE,CAACzB,aAAa,CAACC,SAAS,EAAEC,OAAO,CAAC,CAAC,EAAEA,OAAO,CAAC;EAC7E;EAES,MAAMgB,OAAOA,CAAC0B,MAAc,EAAExB,OAAkC;IACvE,MAAMkC,UAAU,GAAG,MAAM,KAAK,CAACpC,OAAO,CAAC0B,MAAM,EAAExB,OAAO,CAAC;IACvD,OAAOkC,UAAU,CAAC,CAAC,CAAC;EACtB;;AAbF1B,OAAA,CAAA4B,oBAAA,GAAAA,oBAAA;AAgBA;AACA,MAAaC,oBAAqB,SAAQD,oBAAoB;EAG5DzC,YACES,EAAM,EACNC,cAAsB,EACtBxB,SAA6B,EAC7BC,OAA8B;IAE9B,KAAK,CAACsB,EAAE,EAAEC,cAAc,EAAExB,SAAS,EAAEC,OAAO,CAAC;IAE7C,IAAI,CAACyB,cAAc,GAAGzC,iBAAA,CAAAwE,cAAc,CAACC,OAAO;IAC5C,IAAI,CAACnC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;EAEA,IAAaR,WAAWA,CAAA;IACtB,OAAO,aAAa;EACtB;EAES,MAAMC,OAAOA,CAAC0B,MAAc,EAAExB,OAAkC;IACvE,MAAMwC,SAAS,GAAG,IAAI,CAAC5B,OAAO,CAAC,CAAC,CAAC,CAACG,IAAI;IACtC,MAAMH,OAAO,GAAG,MAAM,IAAI,CAACR,EAAE,CAC1BR,UAAU,CAAC,IAAI,CAACS,cAAc,CAAC,CAC/BoC,WAAW,CAAC;MAAEzC;IAAO,CAAE,CAAC,CACxB0C,OAAO,EAAE,CACTC,KAAK,CAACC,KAAK,IAAG;MACb,IAAIA,KAAK,YAAYhF,OAAA,CAAAiF,UAAU,IAAID,KAAK,CAACE,IAAI,KAAKlF,OAAA,CAAAmF,mBAAmB,CAACC,iBAAiB,EACrF,OAAO,EAAE;MACX,MAAMJ,KAAK;IACb,CAAC,CAAC;IACJ,IAAIJ,SAAS,IAAI5B,OAAO,CAACqC,IAAI,CAACd,KAAK,IAAIA,KAAK,CAACpB,IAAI,KAAKyB,SAAS,CAAC,EAAE,OAAOA,SAAS;IAClF,OAAO,KAAK,CAAC1C,OAAO,CAAC0B,MAAM,EAAExB,OAAO,CAAC;EACvC;;AAjCFQ,OAAA,CAAA6B,oBAAA,GAAAA,oBAAA;AAuCA;AACA,MAAaa,kBAAmB,SAAQlF,SAAA,CAAA0C,gBAA0B;EAKhEf,YAAYC,UAAsB,EAAE4C,SAAiB,EAAE1D,OAA4B;IACjF,KAAK,CAACc,UAAU,EAAEd,OAAO,CAAC;IAE1B,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACc,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAAC4C,SAAS,GAAGA,SAAS;EAC5B;EAEA,IAAa3C,WAAWA,CAAA;IACtB,OAAO,aAAsB;EAC/B;EAES,MAAMC,OAAOA,CAAC0B,MAAc,EAAExB,OAAkC;IACvE,MAAM2B,GAAG,GAAG;MAAEwB,WAAW,EAAE,IAAI,CAACvD,UAAU,CAACS,cAAc;MAAE8B,KAAK,EAAE,IAAI,CAACK;IAAS,CAAE;IAClF,OAAO,KAAK,CAACP,cAAc,CAACT,MAAM,EAAExB,OAAO,EAAE2B,GAAG,CAAC;EACnD;;AApBFnB,OAAA,CAAA0C,kBAAA,GAAAA,kBAAA;AA6BA;AACA,MAAaE,oBAAqB,SAAQpF,SAAA,CAAA0C,gBAA0B;EAWlEf,YAAYC,UAAsB,EAAEd,OAA4B;IAC9D,KAAK,CAACc,UAAU,EAAEd,OAAO,CAAC;IAE1B,IAAI,CAACA,OAAO,GAAG;MAAE,GAAGA;IAAO,CAAE;IAC7B,OAAO,IAAI,CAACA,OAAO,CAACuE,YAAY;IAChC,IAAI,CAACC,mBAAmB,GAAG1D,UAAU,CAACO,CAAC,CAACoD,SAAS;EACnD;EAEA,IAAa1D,WAAWA,CAAA;IACtB,OAAO,aAAsB;EAC/B;EAES,MAAMC,OAAOA,CAAC0B,MAAc,EAAExB,OAAkC;IACvE,MAAMyB,iBAAiB,GAAG,IAAA1D,OAAA,CAAA2D,cAAc,EAACF,MAAM,CAAC;IAEhD,MAAMgC,MAAM,GAAG,IAAI,CAAC1E,OAAO,CAAC2E,SAAS,GAAG;MAAEA,SAAS,EAAE,IAAI,CAAC3E,OAAO,CAAC2E;IAAS,CAAE,GAAG,EAAE;IAElF,MAAMC,OAAO,GAAa;MAAEjB,WAAW,EAAE,IAAI,CAACa,mBAAmB,CAAC1D,UAAU;MAAE4D;IAAM,CAAE;IAEtF;IACA;IACA,IAAI/B,iBAAiB,IAAI,CAAC,IAAI,IAAI,CAAC3C,OAAO,CAAC6E,OAAO,KAAK3B,SAAS,EAAE;MAChE0B,OAAO,CAACC,OAAO,GAAG,IAAI,CAAC7E,OAAO,CAAC6E,OAAO;;IAGxC,OAAO,KAAK,CAAC1B,cAAc,CAACT,MAAM,EAAExB,OAAO,EAAE0D,OAAO,CAAC;EACvD;;AArCFlD,OAAA,CAAA4C,oBAAA,GAAAA,oBAAA;AAwCA;AACA,MAAaQ,oBAAqB,SAAQ1F,WAAA,CAAAwB,iBAA0B;EAKlEC,YACEC,UAAsB,EACtBgB,OAA0B,EAC1B9B,OAAgC;IAEhC,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACc,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACgB,OAAO,GAAGA,OAAO;EACxB;EAEA,IAAaf,WAAWA,CAAA;IACtB,OAAO,aAAsB;EAC/B;EAES,MAAMC,OAAOA,CAAC0B,MAAc,EAAExB,OAAkC;IACvE,MAAMC,IAAI,GAAG,IAAI,CAACL,UAAU;IAC5B,MAAMgB,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,MAAMiD,IAAI,GAAG,MAAM,IAAA5F,kBAAA,CAAAiC,gBAAgB,EAACD,IAAI,CAACE,CAAC,CAACC,EAAE,EAAEH,IAAI,CAACI,cAAc,EAAE;MAClE,GAAG,IAAI,CAACvB,OAAO;MACfyB,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCP;KACD,CAAC;IACF;IACA,IAAI,CAACvB,KAAK,CAACC,OAAO,CAACkC,OAAO,CAAC,EAAE,OAAOiD,IAAI,CAACjD,OAAO,CAAC,IAAI,IAAI;IACzD;IACA,OAAOA,OAAO,CAACkD,KAAK,CAACtB,SAAS,IAAIqB,IAAI,CAACrB,SAAS,CAAC,IAAI,IAAI,CAAC;EAC5D;;AAjCFhC,OAAA,CAAAoD,oBAAA,GAAAA,oBAAA;AAoCA;AACA,MAAaG,yBAA0B,SAAQ7F,WAAA,CAAAwB,iBAA2B;EAKxEC,YAAYS,EAAM,EAAEW,IAAY,EAAEjC,OAAiC;IACjE,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACsB,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACW,IAAI,GAAGA,IAAI;EAClB;EAEA,IAAalB,WAAWA,CAAA;IACtB,OAAO,aAAsB;EAC/B;EAES,MAAMC,OAAOA,CAAC0B,MAAc,EAAExB,OAAkC;IACvE,MAAMI,EAAE,GAAG,IAAI,CAACA,EAAE;IAClB,MAAMW,IAAI,GAAG,IAAI,CAACA,IAAI;IAEtB,OAAO,IAAA9C,kBAAA,CAAAiC,gBAAgB,EAACE,EAAE,EAAEW,IAAI,EAAE;MAChC,GAAG,IAAI,CAACjC,OAAO;MACfyB,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCP;KACD,CAAC;EACJ;;AAzBFQ,OAAA,CAAAuD,yBAAA,GAAAA,yBAAA;AA4BA,IAAA7F,WAAA,CAAA8F,aAAa,EAACZ,oBAAoB,EAAE,CAClClF,WAAA,CAAA+F,MAAM,CAACC,cAAc,EACrBhG,WAAA,CAAA+F,MAAM,CAACE,SAAS,EAChBjG,WAAA,CAAA+F,MAAM,CAACG,eAAe,CACvB,CAAC;AACF,IAAAlG,WAAA,CAAA8F,aAAa,EAACvD,sBAAsB,EAAE,CAACvC,WAAA,CAAA+F,MAAM,CAACI,eAAe,CAAC,CAAC;AAC/D,IAAAnG,WAAA,CAAA8F,aAAa,EAAC5B,oBAAoB,EAAE,CAAClE,WAAA,CAAA+F,MAAM,CAACI,eAAe,CAAC,CAAC;AAC7D,IAAAnG,WAAA,CAAA8F,aAAa,EAAC3B,oBAAoB,EAAE,CAACnE,WAAA,CAAA+F,MAAM,CAACI,eAAe,CAAC,CAAC;AAC7D,IAAAnG,WAAA,CAAA8F,aAAa,EAACd,kBAAkB,EAAE,CAAChF,WAAA,CAAA+F,MAAM,CAACI,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}